package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS io.github.wfouche.tulip:tulip-runtime:2.1.11
//DEPS org.python:jython-slim:2.7.4
//JAVA 21
// spotless:on

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import org.python.util.PythonInterpreter;

/**
 * The class provides a main method to run a Python script embedded in a Java application.
 *
 * <p>This class is generated by JBang from a Python script.
 */
public class report_py {

    /** The base64 encoded Python script to be executed. */
    public static String mainScriptTextBase64 =
            "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";

    /** Private constructor to prevent instantiation. */
    public report_py() {
        // Private constructor to prevent instantiation
    }

    /**
     * Decompresses a byte array that was compressed using GZIP.
     *
     * @param compressedData The byte array containing the compressed data.
     * @return The decompressed string.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static String decompress(byte[] compressedData) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);
        GZIPInputStream gzip = new GZIPInputStream(bis);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzip.read(buffer)) != -1) {
            bos.write(buffer, 0, len);
        }
        gzip.close();
        bis.close();
        bos.close();
        return bos.toString(StandardCharsets.UTF_8.name());
    }

    /**
     * The main method that serves as the entry point for the application. It initializes the Python
     * interpreter and executes the embedded script.
     *
     * @param args Command-line arguments passed to the application.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static void main(String... args) throws IOException {
        String mainScriptFilename = "report.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decompress(decodedBytes));
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
