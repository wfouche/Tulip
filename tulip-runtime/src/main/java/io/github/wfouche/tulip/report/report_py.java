package io.github.wfouche.tulip.report;

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS io.github.wfouche.tulip:tulip-runtime:2.1.11
//DEPS org.python:jython-slim:2.7.4
//JAVA 21
// spotless:on

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import org.python.util.PythonInterpreter;

/**
 * The class provides a main method to run a Python script embedded in a Java application.
 *
 * <p>This class is generated by JBang from a Python script.
 */
public class report_py {

    /** The base64 encoded Python script to be executed. */
    public static String mainScriptTextBase64 =
            "";

    /** Private constructor to prevent instantiation. */
    public report_py() {
        // Private constructor to prevent instantiation
    }

    /**
     * Decompresses a byte array that was compressed using GZIP.
     *
     * @param compressedData The byte array containing the compressed data.
     * @return The decompressed string.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static String decompress(byte[] compressedData) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);
        GZIPInputStream gzip = new GZIPInputStream(bis);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzip.read(buffer)) != -1) {
            bos.write(buffer, 0, len);
        }
        gzip.close();
        bis.close();
        bos.close();
        return bos.toString(StandardCharsets.UTF_8.name());
    }

    /**
     * The main method that serves as the entry point for the application. It initializes the Python
     * interpreter and executes the embedded script.
     *
     * @param args Command-line arguments passed to the application.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static void main(String... args) throws IOException {
        String mainScriptFilename = "report.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decompress(decodedBytes));
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
