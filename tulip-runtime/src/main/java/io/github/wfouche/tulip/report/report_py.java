package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS org.python:jython-standalone:2.7.4
//DEPS com.google.code.gson:gson:2.11.0
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS org.python:jython-standalone:2.7.4
//JAVA 21
// spotless:on

// import org.python.util.jython;
import java.util.Base64;
import org.python.util.PythonInterpreter;

public class report_py {

  public static String mainScriptTextBase64 =
      "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbgppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGpzb24KaW1wb3J0IHN5cwppbXBvcnQgb3JnLkhkckhpc3RvZ3JhbS5IaXN0b2dyYW0gYXMgSGlzdG9ncmFtCmltcG9ydCBvcwpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdAppbXBvcnQgamF2YS5pby5QcmludFN0cmVhbSBhcyBQcmludFN0cmVhbQppbXBvcnQgamF2YS5pby5CeXRlQXJyYXlPdXRwdXRTdHJlYW0gYXMgQnl0ZUFycmF5T3V0cHV0U3RyZWFtCgojI0RFUFMgb3JnLnB5dGhvbjpqeXRob24tc3RhbmRhbG9uZToyLjcuNAojI0RFUFMgY29tLmdvb2dsZS5jb2RlLmdzb246Z3NvbjoyLjExLjAKIyNERVBTIG9yZy5oZHJoaXN0b2dyYW06SGRySGlzdG9ncmFtOjIuMi4yCiMjSkFWQSAyMQoKc3VtbWFyeV9odG1sXzEgPSAnJyc8IURPQ1RZUEUgaHRtbD4KPGh0bWw+CjxoZWFkPgo8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CiAgICBkaXYuaGlzdG8gewogICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbgogICAgfQo8L3N0eWxlPgoKPCEtLUxvYWQgdGhlIEFKQVggQVBJLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vanNhcGkiPjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgIGlmICh3aW5kb3cuRmlsZSAmJiB3aW5kb3cuRmlsZVJlYWRlciAmJiB3aW5kb3cuRmlsZUxpc3QgJiYgd2luZG93LkJsb2IpIHsKICAgICAgICAvLyBHcmVhdCBzdWNjZXNzISBBbGwgdGhlIEZpbGUgQVBJcyBhcmUgc3VwcG9ydGVkLgogICAgfSBlbHNlIHsKICAgICAgICBhbGVydCgnVGhlIEZpbGUgQVBJcyBhcmUgbm90IGZ1bGx5IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuJyk7CiAgICB9CgogICAgLy8gTG9hZCB0aGUgVmlzdWFsaXphdGlvbiBBUEkgYW5kIHRoZSBjb3JlY2hhcnQgcGFja2FnZS4KICAgIGdvb2dsZS5sb2FkKCd2aXN1YWxpemF0aW9uJywgJzEuMCcsIHsncGFja2FnZXMnOlsnY29yZWNoYXJ0J119KTsKCiAgICAvLyBTZXQgYSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgR29vZ2xlIFZpc3VhbGl6YXRpb24gQVBJIGlzIGxvYWRlZC4KICAgIGdvb2dsZS5zZXRPbkxvYWRDYWxsYmFjayhkcmF3SW5pdGlhbENoYXJ0KTsKCiAgICB2YXIgY2hhcnREYXRhID0gbnVsbDsKICAgIHZhciBjaGFydCA9IG51bGw7CgogICAgZnVuY3Rpb24gc2V0Q2hhcnREYXRhKG5hbWVzLCBoaXN0b3MpIHsKICAgICAgICB3aGlsZSAobmFtZXMubGVuZ3RoIDwgaGlzdG9zLmxlbmd0aCkgewogICAgICAgICAgICBuYW1lcy5wdXNoKCdVbmtub3duJyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgc2VyaWVzID0gW107CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoaXN0b3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgc2VyaWVzID0gYXBwZW5kRGF0YVNlcmllcyhoaXN0b3NbaV0sIG5hbWVzW2ldLCBzZXJpZXMpOwogICAgICAgIH0KCiAgICAgICAgY2hhcnREYXRhID0gZ29vZ2xlLnZpc3VhbGl6YXRpb24uYXJyYXlUb0RhdGFUYWJsZShzZXJpZXMpOwogICAgfQoKJycnCgp0ZXh0X2Jsb2NrXzEgPSAnJycKICAgIGZ1bmN0aW9uIGRyYXdJbml0aWFsQ2hhcnQoKSB7CiAgICAgICAgLy8gQ29ubmVjdCB0aGUgY2hvb3NlIGZpbGVzIGJ1dHRvbjoKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZXMnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBoYW5kbGVGaWxlU2VsZWN0LCBmYWxzZSk7CgogICAgICAgIC8vIExvYWQgc29tZSBzdGF0aWMgZXhhbXBsZSBkYXRhOgogICAgICAgIHZhciBkYXRhMVN0ciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImRpdiNkYXRhXzEiKS5pbm5lckhUTUwudHJpbSgpOwogICAgICAgIHZhciBkYXRhMlN0ciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImRpdiNkYXRhXzIiKS5pbm5lckhUTUwudHJpbSgpOwogICAgICAgIHZhciBkYXRhM1N0ciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImRpdiNkYXRhXzMiKS5pbm5lckhUTUwudHJpbSgpOwogICAgICAgIHZhciBoaXN0b3MgPSBbZGF0YTNTdHIsIGRhdGEyU3RyLCBkYXRhMVN0cl07CiAgICAgICAgdmFyIG5hbWVzID0gWydBJywgJ0InLCAnQyddOwoKICAgICAgICBzZXRDaGFydERhdGEobmFtZXMsIGhpc3Rvcyk7CiAgICAgICAgZHJhd0NoYXJ0KCk7CiAgICB9CicnJwoKc3VtbWFyeV9odG1sXzIgPSAnJycKICAgIHZhciBtYXhQZXJjZW50aWxlID0gMTAwMDAwMDsKCiAgICBmdW5jdGlvbiBkcmF3Q2hhcnQoKSB7CgogICAgICAgIHZhciB0aWNrcyA9CiAgICAgICAgICAgICAgICBbe3Y6MSxmOicwJSd9LAogICAgICAgICAgICAgICAgICAgIHt2OjEwLGY6JzkwJSd9LAogICAgICAgICAgICAgICAgICAgIHt2OjEwMCxmOic5OSUnfSwKICAgICAgICAgICAgICAgICAgICB7djoxMDAwLGY6Jzk5LjklJ30sCiAgICAgICAgICAgICAgICAgICAge3Y6MTAwMDAsZjonOTkuOTklJ30sCiAgICAgICAgICAgICAgICAgICAge3Y6MTAwMDAwLGY6Jzk5Ljk5OSUnfSwKICAgICAgICAgICAgICAgICAgICB7djoxMDAwMDAwLGY6Jzk5Ljk5OTklJ30sCiAgICAgICAgICAgICAgICAgICAge3Y6MTAwMDAwMDAsZjonOTkuOTk5OTklJ30sCiAgICAgICAgICAgICAgICAgICAge3Y6MTAwMDAwMDAwLGY6Jzk5Ljk5OTk5OSUnfV07CgogICAgICAgIHZhciB1bml0U2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRpbWVVbml0U2VsZWN0aW9uIik7CiAgICAgICAgdmFyIHVuaXRTZWxJbmRleCA9IHVuaXRTZWxlY3Rpb24uc2VsZWN0ZWRJbmRleDsKICAgICAgICB2YXIgdW5pdFRleHQgPSB1bml0U2VsZWN0aW9uLm9wdGlvbnNbdW5pdFNlbEluZGV4XS5pbm5lckhUTUw7CgogICAgICAgIHZhciBvcHRpb25zID0gewovLyAgICAgICAgICAgIHRpdGxlOiAnUGVyY2VudGlsZSBSZXNwb25zZSBUaW1lIERpc3RyaWJ1dGlvbicsCiAgICAgICAgICAgIGhlaWdodDogNDgwLAovLyAgICAgICAgICAgIGhBeGlzOiB7dGl0bGU6ICdQZXJjZW50aWxlJywgbWluVmFsdWU6IDAsIGxvZ1NjYWxlOiB0cnVlLCB0aWNrczp0aWNrcyB9LAogICAgICAgICAgICBoQXhpczogewogICAgICAgICAgICAgICAgdGl0bGU6ICJQZXJjZW50aWxlIiwKICAgICAgICAgICAgICAgIG1pblZhbHVlOiAxLCBsb2dTY2FsZTogdHJ1ZSwgdGlja3M6dGlja3MsCiAgICAgICAgICAgICAgICB2aWV3V2luZG93TW9kZTonZXhwbGljaXQnLAogICAgICAgICAgICAgICAgdmlld1dpbmRvdzp7CiAgICAgICAgICAgICAgICAgICAgbWF4Om1heFBlcmNlbnRpbGUsCiAgICAgICAgICAgICAgICAgICAgbWluOjEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdkF4aXM6IHt0aXRsZTogJ0xhdGVuY3kgKCcgKyB1bml0VGV4dCArICcpJywgbWluVmFsdWU6IDAgfSwKICAgICAgICAgICAgbGVnZW5kOiB7cG9zaXRpb246ICdib3R0b20nfQogICAgICAgIH07CgoKICAgICAgICAvLyBhZGQgdG9vbHRpcHMgd2l0aCBjb3JyZWN0IHBlcmNlbnRpbGUgdGV4dCB0byBkYXRhOgogICAgICAgIHZhciBjb2x1bW5zID0gWzBdOwogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY2hhcnREYXRhLmdldE51bWJlck9mQ29sdW1ucygpOyBpKyspIHsKICAgICAgICAgICAgY29sdW1ucy5wdXNoKGkpOwogICAgICAgICAgICBjb2x1bW5zLnB1c2goewogICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ3Rvb2x0aXAnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2FsYzogKGZ1bmN0aW9uIChqKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkdCwgcm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50aWxlID0gMTAwLjAgLSAoMTAwLjAvZHQuZ2V0VmFsdWUocm93LCAwKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC5nZXRDb2x1bW5MYWJlbChqKSArICc6ICcgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRpbGUudG9QcmVjaXNpb24oNykgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcJVxcJ2lsZSA9ICcgKyBkdC5nZXRWYWx1ZShyb3csIGopICsgJyAnICsgdW5pdFRleHQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KShpKQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgdmFyIHZpZXcgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVZpZXcoY2hhcnREYXRhKTsKICAgICAgICB2aWV3LnNldENvbHVtbnMoY29sdW1ucyk7CgogICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkxpbmVDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRfZGl2JykpOwogICAgICAgIGNoYXJ0LmRyYXcodmlldywgb3B0aW9ucyk7CgogICAgICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmV2ZW50cy5hZGRMaXN0ZW5lcihjaGFydCwgJ3JlYWR5JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjaGFydF9kaXYuaW5uZXJIVE1MID0gJzxpbWcgc3JjPSInICsgY2hhcnQuZ2V0SW1hZ2VVUkkoKSArICciPic7CiAgICAgICAgfSk7CgogICAgfQo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgZnVuY3Rpb24gYXBwZW5kRGF0YVNlcmllcyhoaXN0bywgbmFtZSwgZGF0YVNlcmllcykgewogICAgICAgIHZhciBzZXJpZXM7CiAgICAgICAgdmFyIHNlcmllc0NvdW50OwogICAgICAgIGlmIChkYXRhU2VyaWVzLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgIHNlcmllcyA9IFsgWydYJywgbmFtZV0gXTsKICAgICAgICAgICAgc2VyaWVzQ291bnQgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlcmllcyA9IGRhdGFTZXJpZXM7CiAgICAgICAgICAgIHNlcmllc1swXS5wdXNoKG5hbWUpOwogICAgICAgICAgICBzZXJpZXNDb3VudCA9IHNlcmllc1swXS5sZW5ndGggLSAxOwogICAgICAgIH0KCiAgICAgICAgdmFyIGxpbmVzID0gaGlzdG8uc3BsaXQoIlxcbiIpOwoKICAgICAgICB2YXIgc2VyaWVzSW5kZXggPSAxOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tpXS50cmltKCk7CiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBsaW5lLnRyaW0oKS5zcGxpdCgvWyBdKy8pOwoKICAgICAgICAgICAgaWYgKGxpbmVbMF0gIT0gJyMnICYmIHZhbHVlcy5sZW5ndGggPT0gNCkgewoKICAgICAgICAgICAgICAgIHZhciB5ID0gcGFyc2VGbG9hdCh2YWx1ZXNbMF0pOwogICAgICAgICAgICAgICAgdmFyIHggPSBwYXJzZUZsb2F0KHZhbHVlc1szXSk7CgogICAgICAgICAgICAgICAgaWYgKCFpc05hTih4KSAmJiAhaXNOYU4oeSkpIHsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcmllc0luZGV4ID49IHNlcmllcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzLnB1c2goW3hdKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHdoaWxlIChzZXJpZXNbc2VyaWVzSW5kZXhdLmxlbmd0aCA8IHNlcmllc0NvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllc1tzZXJpZXNJbmRleF0ucHVzaChudWxsKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHNlcmllc1tzZXJpZXNJbmRleF0ucHVzaCh5KTsKICAgICAgICAgICAgICAgICAgICBzZXJpZXNJbmRleCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB3aGlsZSAoc2VyaWVzSW5kZXggPCBzZXJpZXMubGVuZ3RoKSB7CiAgICAgICAgICAgIHNlcmllc1tzZXJpZXNJbmRleF0ucHVzaChudWxsKTsKICAgICAgICAgICAgc2VyaWVzSW5kZXgrKzsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZXJpZXM7CiAgICB9Cjwvc2NyaXB0Pgo8c2NyaXB0PgogICAgZnVuY3Rpb24gdGltZVVuaXRzU2VsZWN0ZWQoZXZ0KSB7CiAgICAgICAgZHJhd0NoYXJ0KCk7CiAgICAgICAgcmV0dXJuIHt0eXBlZDogJyd9OwogICAgfQoKICAgIGZ1bmN0aW9uIGRvRXhwb3J0KGV2ZW50KSB7CiAgICAgICAgc2F2ZVN2Z0FzUG5nKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpLCAnSGlzdG9ncmFtJywgMi4wKTsKICAgICAgICByZXR1cm4ge3R5cGVkOiAnJ307CiAgICB9Cjwvc2NyaXB0PgoKPHNjcmlwdD4KICAgIGZ1bmN0aW9uIGhhbmRsZUZpbGVTZWxlY3QoZXZ0KSB7CiAgICAgICAgdmFyIGZpbGVzID0gZXZ0LnRhcmdldC5maWxlczsgLy8gRmlsZUxpc3Qgb2JqZWN0CiAgICAgICAgdmFyIGZpbGVEaXNwbGF5QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlRGlzcGxheUFyZWEnKTsKCiAgICAgICAgdmFyIG5hbWVzID0gW107CiAgICAgICAgdmFyIGhpc3RvcyA9IFtdOwoKICAgICAgICBmaWxlRGlzcGxheUFyZWEuaW5uZXJUZXh0ID0gImZpbGUgc2VsZWN0ZWQuLi5cXG4iOwoKICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIEZpbGVMaXN0IGFuZCByZW5kZXIgaW1hZ2UgZmlsZXMgYXMgdGh1bWJuYWlscy4KICAgICAgICBmb3IgKHZhciBpID0gMCwgZjsgZiA9IGZpbGVzW2ldOyBpKyspIHsKICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICAgICAgICByZWFkZXIub25sb2FkID0gKGZ1bmN0aW9uKHRoZUZpbGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgaGlzdG9zLnB1c2goZS50YXJnZXQucmVzdWx0KTsKICAgICAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKGVzY2FwZSh0aGVGaWxlLm5hbWUpKTsKICAgICAgICAgICAgICAgICAgICBmaWxlRGlzcGxheUFyZWEuaW5uZXJUZXh0ID0gIiBQbG90dGluZyBpbnB1dCBmcm9tOiAiICsgbmFtZXMgKyAiXFxuIjsKICAgICAgICAgICAgICAgICAgICBzZXRDaGFydERhdGEobmFtZXMsIGhpc3Rvcyk7CiAgICAgICAgICAgICAgICAgICAgZHJhd0NoYXJ0KCk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KShmKTsKCiAgICAgICAgICAgIC8vIFJlYWQgaW4gdGhlIGltYWdlIGZpbGUgYXMgYSBkYXRhIFVSTC4KICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZik7CiAgICAgICAgfQoKICAgIH0KCjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzOwoKICAgICAgICB2YXIgZG9jdHlwZSA9ICc8P3htbCB2ZXJzaW9uPSIxLjAiIHN0YW5kYWxvbmU9Im5vIj8+PCFET0NUWVBFIHN2ZyBQVUJMSUMgIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkIj4nOwoKICAgICAgICBmdW5jdGlvbiBpbmxpbmVJbWFnZXMoY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIGltYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N2ZyBpbWFnZScpOwogICAgICAgICAgICB2YXIgbGVmdCA9IGltYWdlcy5sZW5ndGg7CiAgICAgICAgICAgIGlmIChsZWZ0ID09IDApIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIChmdW5jdGlvbihpbWFnZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHJlZiA9IGltYWdlLmdldEF0dHJpYnV0ZSgneGxpbms6aHJlZicpLnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15odHRwLy50ZXN0KGhyZWYpICYmICEobmV3IFJlZ0V4cCgnXicgKyB3aW5kb3cubG9jYXRpb24uaG9zdCkudGVzdChocmVmKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQ2Fubm90IHJlbmRlciBlbWJlZGRlZCBpbWFnZXMgbGlua2luZyB0byBleHRlcm5hbCBob3N0cy4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTsKICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gaW1hZ2UuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJyk7CiAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWcud2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZSgneGxpbms6aHJlZicsIGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpKTsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdC0tOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVmdCA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkoaW1hZ2VzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc3R5bGVzKGRvbSkgewogICAgICAgICAgICB2YXIgY3NzID0gIiI7CiAgICAgICAgICAgIHZhciBzaGVldHMgPSBkb2N1bWVudC5zdHlsZVNoZWV0czsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGVldHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChzaGVldHNbaV0uaGFzT3duUHJvcGVydHkoJ2Nzc1J1bGVzJykpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSBzaGVldHNbaV0uY3NzUnVsZXM7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlcy5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2pdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJ1bGUuc3R5bGUpICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MgKz0gcnVsZS5zZWxlY3RvclRleHQgKyAiIHsgIiArIHJ1bGUuc3R5bGUuY3NzVGV4dCArICIgfVxcbiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgICAgICAgICAgcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTsKICAgICAgICAgICAgcy5pbm5lckhUTUwgPSAiPCFbQ0RBVEFbXFxuIiArIGNzcyArICJcXG5dXT4iOwoKICAgICAgICAgICAgdmFyIGRlZnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkZWZzJyk7CiAgICAgICAgICAgIGRlZnMuYXBwZW5kQ2hpbGQocyk7CiAgICAgICAgICAgIHJldHVybiBkZWZzOwogICAgICAgIH0KCiAgICAgICAgb3V0JC5zdmdBc0RhdGFVcmkgPSBmdW5jdGlvbihlbCwgc2NhbGVGYWN0b3IsIGNiKSB7CiAgICAgICAgICAgIHNjYWxlRmFjdG9yID0gc2NhbGVGYWN0b3IgfHwgMTsKCiAgICAgICAgICAgIGlubGluZUltYWdlcyhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKHRydWUpOwogICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gcGFyc2VJbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLmdldEF0dHJpYnV0ZSgnd2lkdGgnKQogICAgICAgICAgICAgICAgICAgICAgICB8fCBjbG9uZS5zdHlsZS53aWR0aAogICAgICAgICAgICAgICAgICAgICAgICB8fCBvdXQkLmdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJykKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykKICAgICAgICAgICAgICAgICAgICAgICAgfHwgY2xvbmUuc3R5bGUuaGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgIHx8IG91dCQuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgdmFyIHhtbG5zID0gImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvIjsKCiAgICAgICAgICAgICAgICBjbG9uZS5zZXRBdHRyaWJ1dGUoInZlcnNpb24iLCAiMS4xIik7CiAgICAgICAgICAgICAgICBjbG9uZS5zZXRBdHRyaWJ1dGVOUyh4bWxucywgInhtbG5zIiwgImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIik7CiAgICAgICAgICAgICAgICBjbG9uZS5zZXRBdHRyaWJ1dGVOUyh4bWxucywgInhtbG5zOnhsaW5rIiwgImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiKTsKICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgid2lkdGgiLCB3aWR0aCAqIHNjYWxlRmFjdG9yKTsKICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgiaGVpZ2h0IiwgaGVpZ2h0ICogc2NhbGVGYWN0b3IpOwogICAgICAgICAgICAgICAgY2xvbmUuc2V0QXR0cmlidXRlKCJ2aWV3Qm94IiwgIjAgMCAiICsgd2lkdGggKyAiICIgKyBoZWlnaHQpOwogICAgICAgICAgICAgICAgb3V0ZXIuYXBwZW5kQ2hpbGQoY2xvbmUpOwoKICAgICAgICAgICAgICAgIGNsb25lLmluc2VydEJlZm9yZShzdHlsZXMoY2xvbmUpLCBjbG9uZS5maXJzdENoaWxkKTsKCiAgICAgICAgICAgICAgICB2YXIgc3ZnID0gZG9jdHlwZSArIG91dGVyLmlubmVySFRNTDsKICAgICAgICAgICAgICAgIHZhciB1cmkgPSAnZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwnICsgd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN2ZykpKTsKICAgICAgICAgICAgICAgIGlmIChjYikgewogICAgICAgICAgICAgICAgICAgIGNiKHVyaSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgb3V0JC5zYXZlU3ZnQXNQbmcgPSBmdW5jdGlvbihlbCwgbmFtZSwgc2NhbGVGYWN0b3IpIHsKICAgICAgICAgICAgb3V0JC5zdmdBc0RhdGFVcmkoZWwsIHNjYWxlRmFjdG9yLCBmdW5jdGlvbih1cmkpIHsKICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJpOwogICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoOwogICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7CgogICAgICAgICAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgICAgICAgICAgICAgIGEuZG93bmxvYWQgPSBuYW1lOwogICAgICAgICAgICAgICAgICAgIGEuaHJlZiA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7CiAgICAgICAgICAgICAgICAgICAgYS5jbGljaygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9KSgpOwo8L3NjcmlwdD4KCjxzdHlsZT4KICAgIC5zbGlkZXItd2lkdGg1MDAKICAgIHsKICAgICAgICB3aWR0aDogNTAwcHg7CiAgICB9Cjwvc3R5bGU+Cgo8L2hlYWQ+Cgo8Ym9keT4KCl9fQ0hBUlRTX1RFWFRfXwoKPGgyPlBlcmNlbnRpbGUgUmVzcG9uc2UgVGltZSBEaXN0cmlidXRpb248L2gyPgoKPGlucHV0IHR5cGU9ImZpbGUiIGlkPSJmaWxlcyIgbmFtZT0iZmlsZXNbXSIgbXVsdGlwbGUgLz4KCjxwcmUgaWQ9ImZpbGVEaXNwbGF5QXJlYSI+UGxlYXNlIHNlbGVjdCBmaWxlKHMpIGFib3ZlLjwvcHJlPgoKPCEtLURpdiB0aGF0IHdpbGwgaG9sZCB0aGUgY2hhcnQtLT4KPGRpdiBpZD0iY2hhcnRfZGl2Ij5Ob25lIExvYWRlZDwvZGl2PgoKTGF0ZW5jeSB0aW1lIHVuaXRzOgo8c2VsZWN0IG5hbWU9InVuaXRzIiBzaXplPSIxIiBpZD0idGltZVVuaXRTZWxlY3Rpb24iIG9uQ2hhbmdlPSJ0aW1lVW5pdHNTZWxlY3RlZCgpIj4KICAgIDxvcHRpb24gdmFsdWU9IkxhdGVuY3kgKHNlY29uZHMpIj5zZWNvbmRzPC9vcHRpb24+CiAgICA8b3B0aW9uIHNlbGVjdGVkIHZhbHVlPSJMYXRlbmN5IChtaWxsaXNlY29uZHMpIj5taWxsaXNlY29uZHM8L29wdGlvbj4KICAgIDxvcHRpb24gdmFsdWU9IkxhdGVuY3kgKHFzKSI+bWljcm9zZWNvbmRzPC9vcHRpb24+CiAgICA8b3B0aW9uIHZhbHVlPSJMYXRlbmN5IChuYW5vc2Vjb25kcykiPm5hbm9zZWNvbmRzPC9vcHRpb24+Cjwvc2VsZWN0Pgo8YnV0dG9uIHR5cGU9J2J1dHRvbicgb25jbGljaz0nZG9FeHBvcnQoZXZlbnQpJz5FeHBvcnQgSW1hZ2U8L2J1dHRvbj4KCiZuYnNwOyAmbmJzcDsgJm5ic3A7ICZuYnNwOwo8cD4KUGVyY2VudGlsZSByYW5nZToKCjxpbnB1dCB0eXBlPSJyYW5nZSIgY2xhc3M9InNsaWRlci13aWR0aDUwMCIKICAgICAgIG1pbj0iMSIgbWF4PSI4IiB2YWx1ZT0iNyIgc3RlcD0iMSIKICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgIG9uY2hhbmdlPSJzaG93VmFsdWUodGhpcy52YWx1ZSkiIC8+CjxzcGFuIGlkPSJwZXJjZW50aWxlUmFuZ2UiPjk5Ljk5OTk5JTwvc3Bhbj4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgZnVuY3Rpb24gc2hvd1ZhbHVlKG5ld1ZhbHVlKSB7CiAgICAgICAgdmFyIHggPSBNYXRoLnBvdygxMCwgbmV3VmFsdWUpOwogICAgICAgIHZhciBwZXJjZW50aWxlID0gMTAwLjAgLSAoMTAwLjAgLyB4KTsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGVyY2VudGlsZVJhbmdlIikuaW5uZXJIVE1MPXBlcmNlbnRpbGUgKyAiJSI7CiAgICAgICAgbWF4UGVyY2VudGlsZSA9IHg7CiAgICAgICAgZHJhd0NoYXJ0KCk7CiAgICAgICAgcmV0dXJuIHt0eXBlZDogJyd9OwogICAgfQo8L3NjcmlwdD4KPC9wPgo8cD4KICAgIDxicj4KKioqIE5vdGU6IElucHV0IGZpbGVzIGFyZSBleHBlY3RlZCB0byBiZSBpbiB0aGUgLmhncm0gZm9ybWF0IHByb2R1Y2VkIGJ5Ckhpc3RvZ3JhbUxvZ1Byb2Nlc3Nvciwgb3IgdGhlIHBlcmNlbnRpbGUgb3V0cHV0IGZvcm1hdCBmb3IgSGRySGlzdG9ncmFtLgpTZWUgZXhhbXBsZSBmaWxlIGZvcm1hdAogICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0hkckhpc3RvZ3JhbS9IZHJIaXN0b2dyYW0vYmxvYi9tYXN0ZXIvR29vZ2xlQ2hhcnRzRXhhbXBsZS9leGFtcGxlMS50eHQiPmhlcmU8L2E+CjwvcD4KPCEtLTxoND5FeHBlY3RlZCBTZXJ2aWNlIExldmVsOjwvaDQ+LS0+CjwhLS08aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9IkVTTCIgdmFsdWU9IkVTTCI+UGxvdCBFeHBlY3RlZCBTZXJ2aWNlIExldmVsPGJyPi0tPgo8IS0tUGVyY2VudGlsZTotLT4KPCEtLTxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iRVNMUGVyY2VudGlsZTAiIG5hbWU9IkVTTFBlcmNlbnRpbGUwIiBzaXplPSI2IiB2YWx1ZSA9IDkwIC8+LS0+CjwhLS0lICZuYnNwICZuYnNwICZuYnNwIExpbWl0Oi0tPgo8IS0tPGlucHV0IHR5cGU9InRleHQiIGlkPSJFU0xMaW1pdDAiIG5hbWU9IkVTTExpbWl0MCIgc2l6ZT0iMTIiLz4tLT4KPCEtLTxicj4tLT4KPCEtLVBlcmNlbnRpbGU6LS0+CjwhLS08aW5wdXQgdHlwZT0idGV4dCIgaWQ9IkVTTFBlcmNlbnRpbGUxIiBuYW1lPSJFU0xQZXJjZW50aWxlMSIgc2l6ZT0iNiIgdmFsdWUgPSA5OSAvPi0tPgo8IS0tJSAmbmJzcCAmbmJzcCAmbmJzcCBMaW1pdDotLT4KPCEtLTxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iRVNMTGltaXQxIiBuYW1lPSJFU0xMaW1pdDEiIHNpemU9IjEyIi8+LS0+CjwhLS08YnI+LS0+CjwhLS1QZXJjZW50aWxlOi0tPgo8IS0tPGlucHV0IHR5cGU9InRleHQiIGlkPSJFU0xQZXJjZW50aWxlMiIgbmFtZT0iRVNMUGVyY2VudGlsZTIiIHNpemU9IjYiIHZhbHVlID0gOTkuOTkgLz4tLT4KPCEtLSUgJm5ic3AgJm5ic3AgJm5ic3AgTGltaXQ6LS0+CjwhLS08aW5wdXQgdHlwZT0idGV4dCIgaWQ9IkVTTExpbWl0MiIgbmFtZT0iRVNMTGltaXQyIiBzaXplPSIxMiIvPi0tPgo8IS0tPGJyPi0tPgo8IS0tUGVyY2VudGlsZTotLT4KPCEtLTxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iRVNMUGVyY2VudGlsZTMiIG5hbWU9IkVTTFBlcmNlbnRpbGUyIiBzaXplPSI2IiB2YWx1ZT0iMTAwLjAiIHJlYWRvbmx5Lz4tLT4KPCEtLSUgJm5ic3AgJm5ic3AgJm5ic3AgTGltaXQ6LS0+CjwhLS08aW5wdXQgdHlwZT0idGV4dCIgaWQ9IkVTTExpbWl0MyIgbmFtZT0iRVNMTGltaXQyIiBzaXplPSIxMiIvPi0tPgoKJycnCgpzdW1tYXJ5X2h0bWxfMyA9ICcnJzwvYm9keT4KPC9odG1sPgonJycKCiMgPGgyPjxhIGhyZWY9Imh0dHBzOi8vd2ZvdWNoZS5naXRodWIuaW8vVHVsaXAtZG9jcyI+X19ERVNDMV9fPC9hPiAvIF9fREVTQzJfXzwvaDI+CiMgPGgyPl9fREVTQzFfXyAvIF9fREVTQzJfXzwvaDI+CgpoZWFkZXIgPSAnJyc8IURPQ1RZUEUgaHRtbD4KPGh0bWw+Cgo8c3R5bGU+CnRhYmxlLCB0aCwgdGQgewogIGJvcmRlcjoxcHggc29saWQgYmxhY2s7IGZvbnQtc2l6ZToxNnB4OyB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KdGg6bnRoLWNoaWxkKG4rMTQpIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNFNUU0RTI7Cn0KdGQ6bnRoLWNoaWxkKG4rMTQpIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNFNUU0RTI7Cn0KPC9zdHlsZT4KCjxib2R5PgoKPGgyPjxhIGhyZWY9Imh0dHBzOi8vd2ZvdWNoZS5naXRodWIuaW8vVHVsaXAtZG9jcyI+X19ERVNDMV9fPC9hPiAvIF9fREVTQzJfXzwvaDI+Cgo8dGFibGUgc3R5bGU9IndpZHRoOjEwMCUiPgogIDx0cj4KICAgIDx0aD5CZW5jaG1hcms8L3RoPgogICAgPHRoPlJ1biBJZDwvdGg+CiAgICA8dGg+I048L3RoPgogICAgPHRoPiNGPC90aD4KICAgIDx0aD5EdXJhdGlvbjwvdGg+CiAgICA8dGg+QXBzPC90aD4KICAgIDx0aD5BdmdfUnQ8L3RoPgogICAgPHRoPlN0ZGV2PC90aD4KICAgIDx0aD5NaW5fUnQ8L3RoPgogICAgPHRoPjkwcF9SdDwvdGg+CiAgICA8dGg+OTlwX1J0PC90aD4KICAgIDx0aD5NYXhfUnQ8L3RoPgogICAgPHRoPk1heF9SdHQ8L3RoPgogICAgPHRoPkFRUzwvdGg+CiAgICA8dGg+TVFTPC90aD4KICAgIDx0aD5BV1Q8L3RoPgogICAgPHRoPk1XVDwvdGg+CiAgICA8dGg+Q1BVX1Q8L3RoPgogICAgPHRoPkNQVTwvdGg+CiAgICA8dGg+TUVNPC90aD4KICA8L3RyPgonJycKCmJlbmNobWFya19jb2x1bW5zID0gJycnCiAgPHRyPgogICAgPHRoPkJlbmNobWFyazwvdGg+CiAgICA8dGg+UnVuIElkPC90aD4KICAgIDx0aD4jTjwvdGg+CiAgICA8dGg+I0Y8L3RoPgogICAgPHRoPkR1cmF0aW9uPC90aD4KICAgIDx0aD5BcHM8L3RoPgogICAgPHRoPkF2Z19SdDwvdGg+CiAgICA8dGg+U3RkZXY8L3RoPgogICAgPHRoPk1pbl9SdDwvdGg+CiAgICA8dGg+OTBwX1J0PC90aD4KICAgIDx0aD45OXBfUnQ8L3RoPgogICAgPHRoPk1heF9SdDwvdGg+CiAgICA8dGg+TWF4X1J0dDwvdGg+CiAgICA8dGg+QVFTPC90aD4KICAgIDx0aD5NUVM8L3RoPgogICAgPHRoPkFXVDwvdGg+CiAgICA8dGg+TVdUPC90aD4KICAgIDx0aD5DUFVfVDwvdGg+CiAgICA8dGg+Q1BVPC90aD4KICAgIDx0aD5NRU08L3RoPgogIDwvdHI+CicnJwoKYmVuY2htYXJrX2hlYWRlciA9ICcnJwogIDx0cj4KICAgIDx0ZD4lczwvdGQ+CiAgICA8dGQ+PC90ZD4KICAgIDx0ZD48L3RkPgogICAgPHRkPjwvdGQ+CiAgICA8dGQ+PC90ZD4KICAgIDx0ZD48L3RkPgogICAgPHRkPjwvdGQ+CiAgICA8dGQ+PC90ZD4KICAgIDx0ZD48L3RkPgogICAgPHRkPjwvdGQ+CiAgICA8dGQ+PC90ZD4KICAgIDx0ZD48L3RkPgogICAgPHRkPjwvdGQ+CiAgICA8dGQ+PC90ZD4KICAgIDx0ZD48L3RkPgogICAgPHRkPjwvdGQ+CiAgICA8dGQ+PC90ZD4KICAgIDx0ZD48L3RkPgogICAgPHRkPjwvdGQ+CiAgICA8dGQ+PC90ZD4KICA8L3RyPgonJycKCmJlbmNobWFya19lbXB0eV9yb3cgPSAnJycKICA8dHI+CiAgICA8dGQ+Jm5ic3A7PC90ZD4KICAgIDx0ZD4mbmJzcDs8L3RkPgogICAgPHRkPiZuYnNwOzwvdGQ+CiAgICA8dGQ+Jm5ic3A7PC90ZD4KICAgIDx0ZD4mbmJzcDs8L3RkPgogICAgPHRkPiZuYnNwOzwvdGQ+CiAgICA8dGQ+Jm5ic3A7PC90ZD4KICAgIDx0ZD4mbmJzcDs8L3RkPgogICAgPHRkPiZuYnNwOzwvdGQ+CiAgICA8dGQ+Jm5ic3A7PC90ZD4KICAgIDx0ZD4mbmJzcDs8L3RkPgogICAgPHRkPiZuYnNwOzwvdGQ+CiAgICA8dGQ+Jm5ic3A7PC90ZD4KICAgIDx0ZD4mbmJzcDs8L3RkPgogICAgPHRkPiZuYnNwOzwvdGQ+CiAgICA8dGQ+Jm5ic3A7PC90ZD4KICAgIDx0ZD4mbmJzcDs8L3RkPgogICAgPHRkPiZuYnNwOzwvdGQ+CiAgICA8dGQ+Jm5ic3A7PC90ZD4KICAgIDx0ZD4mbmJzcDs8L3RkPgogIDwvdHI+CicnJwoKYmVuY2htYXJrX2RldGFpbF9yb3cgPSAnJycKICA8dHI+CiAgICA8dGQ+JXM8L3RkPgogICAgPHRkPiVkPC90ZD4KICAgIDx0ZD4lZDwvdGQ+CiAgICA8dGQ+JWQ8L3RkPgogICAgPHRkPiVzPC90ZD4KICAgIDx0ZD4lLjNmPC90ZD4KICAgIDx0ZD4lLjNmIG1zPC90ZD4KICAgIDx0ZD4lLjFmIG1zPC90ZD4KICAgIDx0ZD4lLjFmIG1zPC90ZD4KICAgIDx0ZD4lLjFmIG1zPC90ZD4KICAgIDx0ZD4lLjFmIG1zPC90ZD4KICAgIDx0ZD4lLjFmIG1zPC90ZD4KICAgIDx0ZD4lczwvdGQ+CiAgICA8dGQ+JS4xZjwvdGQ+CiAgICA8dGQ+JWQ8L3RkPgogICAgPHRkPiUuMWY8L3RkPgogICAgPHRkPiUuMWY8L3RkPgogICAgPHRkPiVzPC90ZD4KICAgIDx0ZD4lLjFmPC90ZD4KICAgIDx0ZD4lLjFmPC90ZD4KICA8L3RyPgonJycKCmJlbmNobWFya19zdW1tYXJ5X3JvdyA9ICcnJwogIDx0cj4KICAgIDx0ZD4lczwvdGQ+CiAgICA8dGQ+JXM8L3RkPgogICAgPHRkPjxiPiVkPC9iPjwvdGQ+CiAgICA8dGQ+PGI+PHRhZzE+JWQ8L3RhZzE+PC9iPjwvdGQ+CiAgICA8dGQ+PGI+JXM8L2I+PC90ZD4KICAgIDx0ZD48Yj48dGFnMj4lLjNmPC90YWcyPjwvYj48L3RkPgogICAgPHRkPjxiPiUuM2YgbXM8L2I+PC90ZD4KICAgIDx0ZD48Yj4lLjFmIG1zPC9iPjwvdGQ+CiAgICA8dGQ+PGI+JS4xZiBtczwvYj48L3RkPgogICAgPHRkPjxiPiUuMWYgbXM8L2I+PC90ZD4KICAgIDx0ZD48Yj4lLjFmIG1zPC9iPjwvdGQ+CiAgICA8dGQ+PGI+JS4xZiBtczwvYj48L3RkPgogICAgPHRkPjxiPiVzPC9iPjwvdGQ+CiAgICA8dGQ+PGI+JS4xZjwvYj48L3RkPgogICAgPHRkPjxiPiVkPC9iPjwvdGQ+CiAgICA8dGQ+PGI+JS4xZjwvYj48L3RkPgogICAgPHRkPjxiPiUuMWY8L2I+PC90ZD4KICAgIDx0ZD48Yj4lczwvYj48L3RkPgogICAgPHRkPjxiPiUuMWY8L2I+PC90ZD4KICAgIDx0ZD48Yj4lLjFmPC9iPjwvdGQ+CiAgPC90cj4KJycnCgp0cmFpbGVyID0gJycnCjwvdGFibGU+CjwvYm9keT4KPC9odG1sPgonJycKCmNoYXJ0c19odG1sID0gJycnCjxoMj5BY3Rpb25zIHBlciBTZWNvbmQ8L2gyPgogIDxkaXYgaWQ9Im1haW4iIHN0eWxlPSJ3aWR0aDogMTAwJTtoZWlnaHQ6NDAwcHg7Ij48L2Rpdj4KICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZWNoYXJ0cy81LjYuMC9lY2hhcnRzLm1pbi5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9Il9fSlNfVF9DSEFSVF9fIj48L3NjcmlwdD4KPGgyPlJlc3BvbnNlIFRpbWVzIChtcyk8L2gyPgogIDxkaXYgaWQ9Im1haW5fcCIgc3R5bGU9IndpZHRoOiAxMDAlO2hlaWdodDo0MDBweDsiPjwvZGl2PgogIDxzY3JpcHQgc3JjPSJfX0pTX1BfQ0hBUlRfXyI+PC9zY3JpcHQ+CicnJwoKY2hhcnRfdF9odG1sID0gJycnCnZhciBteUNoYXJ0MSA9IGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbicpKTsKCnZhciBkYXRhID0gIF9fREFUQV9fOwoKdmFyIG9wdGlvbiA9IHsKICBsZWdlbmQ6IHt9LAogIHRvb2x0aXA6IHsKICAgIHRyaWdnZXI6ICdheGlzJywKICB9LAogIGRhdGFzZXQ6IHsKICAgIHNvdXJjZTpkYXRhLAogICAgZGltZW5zaW9uczogWyd0aW1lc3RhbXAnLCAnc2Vuc29yMScsICdzZW5zb3IyJ10sCiAgfSwKICB4QXhpczogeyB0eXBlOiAndGltZScgfSwKICB5QXhpczogeyB9LAogIHNlcmllczogWwogIHsKICAgICBuYW1lOiAnQWN0aW9ucy9zJywKICAgICB0eXBlOiAnbGluZScsCiAgICAgc21vb3RoOiB0cnVlLAogICAgIGVuY29kZTogewogICAgICAgeDogJ3RpbWVzdGFtcCcsCiAgICAgICB5OiAnc2Vuc29yMScgLy8gcmVmZXIgc2Vuc29yIDEgdmFsdWUgCiAgICAgfQogIH0sewogICAgIG5hbWU6ICdGYWlsdXJlcy9zJywKICAgICB0eXBlOiAnbGluZScsCiAgICAgc21vb3RoOiB0cnVlLAogICAgIGVuY29kZTogewogICAgICAgeDogJ3RpbWVzdGFtcCcsCiAgICAgICB5OiAnc2Vuc29yMicKICB9Cn1dCn07Cm15Q2hhcnQxLnNldE9wdGlvbihvcHRpb24pOwonJycKCmNoYXJ0X3BfaHRtbCA9ICcnJwp2YXIgbXlDaGFydDIgPSBlY2hhcnRzLmluaXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW5fcCcpKTsKCnZhciBkYXRhID0gIF9fREFUQV9fOwoKdmFyIG9wdGlvbiA9IHsKICBsZWdlbmQ6IHt9LAogIHRvb2x0aXA6IHsKICAgIHRyaWdnZXI6ICdheGlzJywKICB9LAogIGRhdGFzZXQ6IHsKICAgIHNvdXJjZTpkYXRhLAogICAgZGltZW5zaW9uczogWyd0aW1lc3RhbXAnLCAnc2Vuc29yMScsICdzZW5zb3IyJywgJ3NlbnNvcjMnLCAnc2Vuc29yNCcsICdzZW5zb3I1JywgJ3NlbnNvcjYnXSwKICB9LAogIHhBeGlzOiB7IHR5cGU6ICd0aW1lJyB9LAogIHlBeGlzOiB7IH0sCiAgc2VyaWVzOiBbCiAgewogICAgIG5hbWU6ICdNYXgnLAogICAgIHR5cGU6ICdsaW5lJywKICAgICBzbW9vdGg6IHRydWUsCiAgICAgZW5jb2RlOiB7CiAgICAgICB4OiAndGltZXN0YW1wJywKICAgICAgIHk6ICdzZW5zb3I2JyAvLyByZWZlciBzZW5zb3IgMSB2YWx1ZQogICAgIH0KICB9LHsKICAgICBuYW1lOiAncDk5JywKICAgICB0eXBlOiAnbGluZScsCiAgICAgc21vb3RoOiB0cnVlLAogICAgIGVuY29kZTogewogICAgICAgeDogJ3RpbWVzdGFtcCcsCiAgICAgICB5OiAnc2Vuc29yNScgLy8gcmVmZXIgc2Vuc29yIDEgdmFsdWUKICAgICB9CiAgfSx7CiAgICAgbmFtZTogJ3A5NScsCiAgICAgdHlwZTogJ2xpbmUnLAogICAgIHNtb290aDogdHJ1ZSwKICAgICBlbmNvZGU6IHsKICAgICAgIHg6ICd0aW1lc3RhbXAnLAogICAgICAgeTogJ3NlbnNvcjQnIC8vIHJlZmVyIHNlbnNvciAxIHZhbHVlCiAgICAgfQoKICB9LHsKICAgICBuYW1lOiAncDkwJywKICAgICB0eXBlOiAnbGluZScsCiAgICAgc21vb3RoOiB0cnVlLAogICAgIGVuY29kZTogewogICAgICAgeDogJ3RpbWVzdGFtcCcsCiAgICAgICB5OiAnc2Vuc29yMycgLy8gcmVmZXIgc2Vuc29yIDEgdmFsdWUKICAgICB9CgogIH0sewogICAgIG5hbWU6ICdBdmcnLAogICAgIHR5cGU6ICdsaW5lJywKICAgICBzbW9vdGg6IHRydWUsCiAgICAgZW5jb2RlOiB7CiAgICAgICB4OiAndGltZXN0YW1wJywKICAgICAgIHk6ICdzZW5zb3IyJwogICAgIH0KICB9LHsKICAgICBuYW1lOiAnTWluJywKICAgICB0eXBlOiAnbGluZScsCiAgICAgc21vb3RoOiB0cnVlLAogICAgIGVuY29kZTogewogICAgICAgeDogJ3RpbWVzdGFtcCcsCiAgICAgICB5OiAnc2Vuc29yMScKICB9Cn1dCn07Cm15Q2hhcnQyLnNldE9wdGlvbihvcHRpb24pOwoKd2luZG93Lm9ucmVzaXplID0gZnVuY3Rpb24oKSB7CiAgbXlDaGFydDEucmVzaXplKCk7CiAgbXlDaGFydDIucmVzaXplKCk7Cn07CicnJwoKY2xhc3MgU3VtbWFyeToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLm51bV9hY3Rpb25zID0gMAogICAgICAgIHNlbGYubnVtX2ZhaWxlZCA9IDAKICAgICAgICBzZWxmLmR1cmF0aW9uID0gMC4wCiAgICAgICAgc2VsZi5taW5fcnQgPSAxMDAwMDAwMDAwLjAKICAgICAgICBzZWxmLm1heF9ydCA9IDAuMAogICAgICAgIHNlbGYubWF4X3J0X3RzID0gIiIKICAgICAgICBzZWxmLm1lbSA9IDAuMAogICAgICAgIHNlbGYuY3B1ID0gMC4wCiAgICAgICAgc2VsZi5tYXhfYXd0ID0gMC4wCiAgICAgICAgc2VsZi5tYXhfd3QgPSAwLjAKICAgICAgICBzZWxmLmF2Z19xcyA9IDAuMAogICAgICAgIHNlbGYubWF4X3FzID0gMAogICAgICAgIHNlbGYubmFtZSA9ICIiCiAgICAgICAgc2VsZi5jcHVfdGltZV9ucyA9IDAKICAgICAgICBzZWxmLmNoYXJ0X3RfbGlzdCA9IFtdICAgIyBbJzIwMTgtMDQtMTBUMjA6NDA6MzMuMTAwJywgMTEwMCwgMF0KICAgICAgICBzZWxmLmNoYXJ0X3BfbGlzdCA9IFtdICAgIyBbJzIwMTgtMDQtMTBUMjA6NDA6MzNaJywgMSwgNSwgMTAsIDIwLCAyNSwgMzBdCgpkZWYgY3JlYXRlUmVwb3J0KGZpbGVuYW1lLCB0ZXh0KToKCiAgICBwcmludCgiXG5PdXRwdXQgZmlsZW5hbWUgPSAiICsgZmlsZW5hbWUpCgogICAgaWYgdGV4dFswXSA9PSAneyc6CiAgICAgICAgY29uZmlnX2ZpbGVuYW1lID0gIiIKICAgIGVsc2U6CiAgICAgICAgY29uZmlnX2ZpbGVuYW1lID0gdGV4dAoKICAgIGpoaCA9IHt9CiAgICBqc3MgPSB7fQoKICAgIHByaW50X2RldGFpbF9yb3dzID0gVHJ1ZQoKICAgIGdsb2JhbCBuYW1lMnMKICAgIGdsb2JhbCBuYW1lMnNfbGlzdAogICAgZ2xvYmFsIGJlbmNobWFya19pZAogICAgbmFtZTJzID0gIiIKICAgIG5hbWUyc19saXN0ID0gW10KICAgIGJlbmNobWFya19pZCA9IDAKCiAgICBzbSA9IE5vbmUKICAgIGpoID0gSGlzdG9ncmFtKDEsIDM2MDAqMTAwMCoxMDAwLCAzKQogICAgZmlsZU9iaiA9IG9wZW4oZmlsZW5hbWUpCiAgICBqYiA9IGpzb24ubG9hZChmaWxlT2JqLCBvYmplY3RfcGFpcnNfaG9vaz1PcmRlcmVkRGljdCkKICAgIHZlcnNpb24gPSBqYlsndmVyc2lvbiddCiAgICBkZXNjMSA9ICdUdWxpcCAnICsgdmVyc2lvbgogICAgcmIgPSBqYlsicmVzdWx0cyJdCgogICAgcmVwb3J0X2ZuID0gamJbImNvbmZpZyJdWyJhY3Rpb25zIl1bInJlcG9ydF9maWxlbmFtZSJdCiAgICByZXBvcnRfZmggPSBvcGVuKHJlcG9ydF9mbiwgIncrIikKCiAgICBnbG9iYWwgcmVwb3J0X2RuCiAgICByZXBvcnRfZG4gPSBvcy5wYXRoLnNwbGl0ZXh0KHJlcG9ydF9mbilbMF0KICAgIHRyeToKICAgICAgICBvcy5tYWtlZGlycyhyZXBvcnRfZG4pCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwoKICAgIGRlZiBvZGlyKGZpbGVuYW1lKToKICAgICAgICBnbG9iYWwgcmVwb3J0X2RuCiAgICAgICAgcmV0dXJuIG9zLnBhdGguam9pbihyZXBvcnRfZG4sIGZpbGVuYW1lKQoKICAgIGlmIGxlbihjb25maWdfZmlsZW5hbWUpID4gMDoKICAgICAgICBkZXNjMiA9ICI8YSBocmVmPSclcyc+IiUob3MucGF0aC5zcGxpdGV4dChjb25maWdfZmlsZW5hbWUpWzBdICsgIi5hZG9jIikKICAgIGVsc2U6CiAgICAgICAgZGVzYzIgPSAiIgoKICAgIGlmIGxlbihjb25maWdfZmlsZW5hbWUpID4gMDoKICAgICAgICBkZXNjMiArPSBqYlsiY29uZmlnIl1bImFjdGlvbnMiXVsiZGVzY3JpcHRpb24iXSArICI8L2E+IC8gIiArIGpiWyJ0aW1lc3RhbXAiXVs6LTNdCiAgICBlbHNlOgogICAgICAgIGRlc2MyICs9IGpiWyJjb25maWciXVsiYWN0aW9ucyJdWyJkZXNjcmlwdGlvbiJdICsgIiAvICIgKyBqYlsidGltZXN0YW1wIl1bOi0zXQoKICAgIHByaW50KCJSZXBvcnQgZmlsZW5hbWUgPSAiICsgcmVwb3J0X2ZuKQoKICAgIGRlZiBwcmludGYocyk6CiAgICAgICAgcmVwb3J0X2ZoLndyaXRlKHMpCgogICAgZGVmIHN0cl9mcm9tX2NwdV90aW1lX25zKHZfbnMpOgogICAgICAgIHIgPSBzdHIoZGF0ZXRpbWUudGltZWRlbHRhKHNlY29uZHM9dl9ucy8xMDAwMDAwMDAwLjApKSAgI1s6LTVdCiAgICAgICAgaWYgJy4nIGluIHI6CiAgICAgICAgICAgIHIgPSByWzotNV0KICAgICAgICByZXR1cm4gcgoKICAgIGRlZiBwcmludF9nbG9iYWxfc3VtbWFyeSgpOgogICAgICAgIGdsb2JhbCBuYW1lMnMKICAgICAgICBnbG9iYWwgbmFtZTJzX2xpc3QKICAgICAgICBnbG9iYWwgYmVuY2htYXJrX2lkCgogICAgICAgIGF2Z19hcHMgPSAwLjAgaWYgc20ubmFtZSBpbiBbIm9uU3RhcnQiLCAib25TdG9wIl0gZWxzZSBzbS5udW1fYWN0aW9ucy9zbS5kdXJhdGlvbgogICAgICAgIGlmIHNtLm5hbWUgaW4gWyJvblN0YXJ0IiwgIm9uU3RvcCJdOgogICAgICAgICAgICBjcHVfdCA9ICIwOjAwOjAwIgogICAgICAgICAgICBzbS5jcHUgPSAwLjAKICAgICAgICBlbHNlOgogICAgICAgICAgICBjcHVfdCA9IHN0cl9mcm9tX2NwdV90aW1lX25zKHNtLmNwdV90aW1lX25zKQoKICAgICAgICBzdGF0c0ZpbGVuYW1lID0gJyVzXyVkLmh0bWwnJShvZGlyKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdKSxiZW5jaG1hcmtfaWQpCiAgICAgICAgdGV4dCA9ICI8YSBocmVmPSclcyc+JXM8L2E+IiUoc3RhdHNGaWxlbmFtZSwiW1N1bW1hcnldIikKICAgICAgICBwcmludFN0cmVhbSA9IFByaW50U3RyZWFtKHN0YXRzRmlsZW5hbWUpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoc3VtbWFyeV9odG1sXzEpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICBmdW5jdGlvbiBkcmF3SW5pdGlhbENoYXJ0KCkgeycpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICAgICAgLy8gQ29ubmVjdCB0aGUgY2hvb3NlIGZpbGVzIGJ1dHRvbjonKQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQogICAgICAgIHByaW50U3RyZWFtLnByaW50KCIgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZUZpbGVTZWxlY3QsIGZhbHNlKTsiKQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQogICAgICAgIHByaW50U3RyZWFtLnByaW50KCcgICAgICAgIC8vIExvYWQgc29tZSBzdGF0aWMgZXhhbXBsZSBkYXRhOicpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgaWR4ID0gMAogICAgICAgIGFjdGlvbnNTdHJpbmcgPSAiIgogICAgICAgIGhpc3Rvc1N0cmluZyA9ICIiCiAgICAgICAgZm9yIGtleSBpbiBqc3Mua2V5cygpOgogICAgICAgICAgICBpZHggKz0gMQogICAgICAgICAgICBzbXggPSBqc3Nba2V5XQogICAgICAgICAgICBqaHggPSBqaGhba2V5XQogICAgICAgICAgICBpZiBsZW4oYWN0aW9uc1N0cmluZykgPiAwOgogICAgICAgICAgICAgICAgYWN0aW9uc1N0cmluZyArPSAnLCAnCiAgICAgICAgICAgICAgICBoaXN0b3NTdHJpbmcgKz0gJywgJwogICAgICAgICAgICBhY3Rpb25zU3RyaW5nICs9ICInQSVzJyIlKGtleSkKICAgICAgICAgICAgaGlzdG9zU3RyaW5nICs9ICJkYXRhJWRTdHIiJShpZHgpCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50KCcgICAgdmFyIGRhdGElZFN0ciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImRpdiNkYXRhXyVkIikuaW5uZXJIVE1MLnRyaW0oKTsnJShpZHgsaWR4KSkKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgaWYgaWR4ID4gMToKICAgICAgICAgICAgYWN0aW9uc1N0cmluZyArPSAnLCAnICsgIidTJyIKICAgICAgICAgICAgaGlzdG9zU3RyaW5nICs9ICcsICcgKyAiZGF0YSVkU3RyIiUoMCkKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICB2YXIgZGF0YSVkU3RyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiZGl2I2RhdGFfJWQiKS5pbm5lckhUTUwudHJpbSgpOyclKDAsMCkpCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQogICAgICAgIHByaW50U3RyZWFtLnByaW50KCcgICAgdmFyIGhpc3RvcyA9IFslc107JyUoaGlzdG9zU3RyaW5nKSkKICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkKICAgICAgICBwcmludFN0cmVhbS5wcmludCgnICAgIHZhciBuYW1lcyA9IFslc107JyUoYWN0aW9uc1N0cmluZykpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCgogICAgICAgIHByaW50U3RyZWFtLnByaW50KCcgICAgc2V0Q2hhcnREYXRhKG5hbWVzLCBoaXN0b3MpOycpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICBkcmF3Q2hhcnQoKTsnKQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQogICAgICAgIHByaW50U3RyZWFtLnByaW50KCcgICAgfScpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgdENoYXJ0RmlsZW5hbWUgPSAnJXNfJWRfdC5qcyclKG9kaXIocmVwb3J0X2ZuLnNwbGl0KCcuJylbMF0pLGJlbmNobWFya19pZCkKICAgICAgICBwQ2hhcnRGaWxlbmFtZSA9ICclc18lZF9wLmpzJyUob2RpcihyZXBvcnRfZm4uc3BsaXQoJy4nKVswXSksYmVuY2htYXJrX2lkKQogICAgICAgIHByaW50U3RyZWFtLnByaW50KAogICAgICAgICAgICBzdW1tYXJ5X2h0bWxfMgogICAgICAgICAgICAgICAgLnJlcGxhY2UoIl9fQ0hBUlRTX1RFWFRfXyIsCiAgICAgICAgICAgICAgICAgICAgY2hhcnRzX2h0bWwKICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCJfX0pTX1RfQ0hBUlRfXyIsb3MucGF0aC5iYXNlbmFtZSh0Q2hhcnRGaWxlbmFtZSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgiX19KU19QX0NIQVJUX18iLG9zLnBhdGguYmFzZW5hbWUocENoYXJ0RmlsZW5hbWUpKSkKICAgICAgICAgICAgICAgICkKICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkKCiAgICAgICAgaWR4ID0gMAogICAgICAgIGZvciBrZXkgaW4ganNzLmtleXMoKToKICAgICAgICAgICAgaWR4ICs9IDEKICAgICAgICAgICAgc214ID0ganNzW2tleV0KICAgICAgICAgICAgamh4ID0gamhoW2tleV0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJzxkaXYgaWQ9ImRhdGFfJWQiIGNsYXNzPSJoaXN0byI+JyUoaWR4KSkKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgICAgIGpoeC5vdXRwdXRQZXJjZW50aWxlRGlzdHJpYnV0aW9uKHByaW50U3RyZWFtLCAxMDAwLjApCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50KCc8L2Rpdj4nKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkKCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJzxkaXYgaWQ9ImRhdGFfMCIgY2xhc3M9Imhpc3RvIj4nKQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQogICAgICAgIGpoLm91dHB1dFBlcmNlbnRpbGVEaXN0cmlidXRpb24ocHJpbnRTdHJlYW0sIDEwMDAuMCkKICAgICAgICBwcmludFN0cmVhbS5wcmludCgnPC9kaXY+JykKICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkKCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoc3VtbWFyeV9odG1sXzMpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgcHJpbnRTdHJlYW0uZmx1c2goKQogICAgICAgIHByaW50U3RyZWFtLmNsb3NlKCkKCiAgICAgICAgIyBBY3Rpb25zL3MgY2hhcnQKICAgICAgICAjY2hhcnRfdF9saXN0ID0gWwogICAgICAgICMgICAgWycyMDE4LTA0LTEwVDIwOjQwOjMzLjEwMCcsIDExMDAsIDBdLAogICAgICAgICMgICAgWycyMDE4LTA0LTEwVDIwOjQwOjUzLjIwMCcsIDEwMDIsIDBdLAogICAgICAgICMgICAgWycyMDE4LTA0LTEwVDIwOjQxOjAzLjMwMCcsIDExMDQsIDBdLAogICAgICAgICMgICAgWycyMDE4LTA0LTEwVDIwOjQ0OjAzLjQwMCcsIDEyMDUuNSwgMF0sCiAgICAgICAgIyAgICBbJzIwMTgtMDQtMTBUMjA6NDU6MDMuNTAwJywgMTMwNiwgMF0KICAgICAgICAjXQogICAgICAgIGNoYXJ0X3BfbGlzdCA9IFsKICAgICAgICAgICAgWycyMDE4LTA0LTEwVDIwOjQwOjMzWicsIDEsIDUsIDEwLCAyMCwgMjUsIDMwIF0sCiAgICAgICAgICAgIFsnMjAxOC0wNC0xMFQyMDo0MDo1M1onLCAyLCA2LCAxNSwgMjUsIDMwLCAzNV0sCiAgICAgICAgICAgIFsnMjAxOC0wNC0xMFQyMDo0MTowM1onLCAyLCA1LCAyMCwgMzAsIDM1LCA0MF0sCiAgICAgICAgICAgIFsnMjAxOC0wNC0xMFQyMDo0NDowM1onLCAzLCA3LCAxMiwgMjIsIDMwLCAzMl0sCiAgICAgICAgICAgIFsnMjAxOC0wNC0xMFQyMDo0NTowM1onLCAyLCAxMCwgMTMsIDIzLCAzMCwgMzNdCiAgICAgICAgXQogICAgICAgIHByaW50U3RyZWFtID0gUHJpbnRTdHJlYW0odENoYXJ0RmlsZW5hbWUpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoY2hhcnRfdF9odG1sLnJlcGxhY2UoIl9fREFUQV9fIiwoIiVzIiUoc20uY2hhcnRfdF9saXN0KSkucmVwbGFjZSgidSciLCInIikpKQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQogICAgICAgIHByaW50U3RyZWFtLmZsdXNoKCkKICAgICAgICBwcmludFN0cmVhbS5jbG9zZSgpCgogICAgICAgICMgUmVzcG9uc2UgVGltZSAobXMpIGNoYXJ0CiAgICAgICAgcHJpbnRTdHJlYW0gPSBQcmludFN0cmVhbShwQ2hhcnRGaWxlbmFtZSkKICAgICAgICBwcmludFN0cmVhbS5wcmludChjaGFydF9wX2h0bWwucmVwbGFjZSgiX19EQVRBX18iLCgiJXMiJShzbS5jaGFydF9wX2xpc3QpKS5yZXBsYWNlKCJ1JyIsIiciKSkpCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpCiAgICAgICAgcHJpbnRTdHJlYW0uZmx1c2goKQogICAgICAgIHByaW50U3RyZWFtLmNsb3NlKCkKCiAgICAgICAgaHRtbCA9IGJlbmNobWFya19zdW1tYXJ5X3JvdyUobmFtZTJzLHRleHQsc20ubnVtX2FjdGlvbnMsc20ubnVtX2ZhaWxlZCxzdHIoZGF0ZXRpbWUudGltZWRlbHRhKHNlY29uZHM9aW50KHNtLmR1cmF0aW9uKSkpLGF2Z19hcHMsamguZ2V0TWVhbigpLzEwMDAuMCxqaC5nZXRTdGREZXZpYXRpb24oKS8xMDAwLjAsc20ubWluX3J0LGpoLmdldFZhbHVlQXRQZXJjZW50aWxlKDkwLjApLzEwMDAuMCxqaC5nZXRWYWx1ZUF0UGVyY2VudGlsZSg5OS4wKS8xMDAwLjAsc20ubWF4X3J0LHNtLm1heF9ydF90c1s4Ol0sc20uYXZnX3FzLHNtLm1heF9xcyxzbS5tYXhfYXd0LHNtLm1heF93dCxjcHVfdCxzbS5jcHUsc20ubWVtKQogICAgICAgIGlmIG5vdCBwcmludF9kZXRhaWxfcm93czoKICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPGI+IiwiIikKICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPC9iPiIsIiIpCiAgICAgICAgIyBWYWxpZGF0aW9uOiAjRgogICAgICAgIGlmIHNtLm51bV9mYWlsZWQgPiAwOgogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8dGFnMT4iLCI8bWFyaz4iKQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L3RhZzE+IiwiPC9tYXJrPiIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPHRhZzE+IiwiIikKICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPC90YWcxPiIsIiIpCiAgICAgICAgIyBWYWxpZGF0aW9uOiBBdmdfQVBTCiAgICAgICAgI3ByaW50KHNtLm5hbWUpCiAgICAgICAgaWYgImFwc19yYXRlIiBpbiBqYlsiY29uZmlnIl1bImJlbmNobWFya3MiXVtzbS5uYW1lXS5rZXlzKCk6CiAgICAgICAgICAgIHRhcmdldF9hcHMgPSBqYlsiY29uZmlnIl1bImJlbmNobWFya3MiXVtzbS5uYW1lXVsiYXBzX3JhdGUiXQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRhcmdldF9hcHMgPSAwLjAKICAgICAgICBpZiB0YXJnZXRfYXBzID4gMC4wOgogICAgICAgICAgICBkZWx0YV9wZXJjZW50YWdlX2FwcyA9IDEwMC4wKmFicyh0YXJnZXRfYXBzLWF2Z19hcHMpL3RhcmdldF9hcHMKICAgICAgICAgICAgaWYgZGVsdGFfcGVyY2VudGFnZV9hcHMgPiAxLjU6CiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8dGFnMj4iLCI8bWFyaz4iKQogICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPC90YWcyPiIsIjwvbWFyaz4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPHRhZzI+IiwiIikKICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjwvdGFnMj4iLCIiKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjx0YWcyPiIsIiIpCiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjwvdGFnMj4iLCIiKQogICAgICAgIHByaW50ZihodG1sKQogICAgICAgIGlmIGxlbihuYW1lMnNfbGlzdCkgPiAwOgogICAgICAgICAgICBuYW1lMnMgPSBuYW1lMnNfbGlzdFswXQogICAgICAgICAgICBkZWwgbmFtZTJzX2xpc3RbMF0KCiAgICBkZWYgcHJpbnRfYWN0aW9uX3N1bW1hcnkoKToKICAgICAgICBnbG9iYWwgbmFtZTJzCiAgICAgICAgZ2xvYmFsIG5hbWUyc19saXN0CiAgICAgICAgZ2xvYmFsIGJlbmNobWFya19pZAogICAgICAgIHBhZ2VfaWQgPSAwCiAgICAgICAgbnVtX2tleXMgPSBsZW4oanNzLmtleXMoKSkKICAgICAgICBmb3Iga2V5IGluIGpzcy5rZXlzKCk6CiAgICAgICAgICAgIHNteCA9IGpzc1trZXldCiAgICAgICAgICAgIGpoeCA9IGpoaFtrZXldCiAgICAgICAgICAgIGlmIGpiWyJjb25maWciXVsiYWN0aW9ucyJdWyJ1c2VyX2FjdGlvbnMiXS5oYXNfa2V5KGtleSk6CiAgICAgICAgICAgICAgICB0ZXh0ID0gIlslcy4lc10iJShrZXksIGpiWyJjb25maWciXVsiYWN0aW9ucyJdWyJ1c2VyX2FjdGlvbnMiXVtrZXldKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgdGV4dCA9ICJbJXNdIiUoa2V5KQogICAgICAgICAgICBzdGF0c0ZpbGVuYW1lID0gJyVzXyVkXyVkLmh0bWwnJShvZGlyKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdKSxiZW5jaG1hcmtfaWQscGFnZV9pZCkKICAgICAgICAgICAgc3RhdHNGaWxlbmFtZVByZXYgPSAnJXNfJWRfJWQuaHRtbCclKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdLGJlbmNobWFya19pZCxhYnMocGFnZV9pZC0xKSkKICAgICAgICAgICAgc3RhdHNGaWxlbmFtZU5leHQgPSAnJXNfJWRfJWQuaHRtbCclKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdLGJlbmNobWFya19pZCxwYWdlX2lkKzEpCiAgICAgICAgICAgIHRleHQgPSAiPGEgaHJlZj0nJXMnPiVzPC9hPiIlKHN0YXRzRmlsZW5hbWUsdGV4dCkKICAgICAgICAgICAgcHJpbnRTdHJlYW0gPSBQcmludFN0cmVhbShzdGF0c0ZpbGVuYW1lKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCI8aHRtbD4iKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCI8c3R5bGU+IikKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigidGFibGUsIHRoLCB0ZCB7IikKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigiICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOyBmb250LXNpemU6MTZweDsgdGV4dC1hbGlnbjogY2VudGVyOyIpCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIn0iKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCJtYXJrIHsiKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCIgIGJhY2tncm91bmQtY29sb3I6IExpZ2h0R3JheTsiKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCIgIGNvbG9yOiBibGFjazsiKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCJ9IikKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigiPC9zdHlsZT4iKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCI8Ym9keT4iKQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIuLi8lcyI+VXA8L2E+JyUocmVwb3J0X2ZuKSkKICAgICAgICAgICAgaWYgKHBhZ2VfaWQgPT0gMCkgYW5kIChudW1fa2V5cyA9PSAxKToKICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJzxhIGhyZWY9IiMiPlByZXY8L2E+JykKICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJzxhIGhyZWY9IiMiPk5leHQ8L2E+JykKICAgICAgICAgICAgZWxpZiAocGFnZV9pZCA9PSAwKSBhbmQgKG51bV9rZXlzID4gMSk6CiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIjIj5QcmV2PC9hPicpCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIlcyI+TmV4dDwvYT4nJShzdGF0c0ZpbGVuYW1lTmV4dCkpCiAgICAgICAgICAgIGVsaWYgKHBhZ2VfaWQrMSA9PSBudW1fa2V5cyk6CiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIlcyI+UHJldjwvYT4nJShzdGF0c0ZpbGVuYW1lUHJldikpCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIjIj5OZXh0PC9hPicpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIlcyI+UHJldjwvYT4nJShzdGF0c0ZpbGVuYW1lUHJldikpCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIlcyI+TmV4dDwvYT4nJShzdGF0c0ZpbGVuYW1lTmV4dCkpCgogICAgICAgICAgICBpZiBqYlsiY29uZmlnIl1bImFjdGlvbnMiXVsidXNlcl9hY3Rpb25zIl0uaGFzX2tleShrZXkpOgogICAgICAgICAgICAgICAgZGVzYyA9ICJbJXMuJXNdIiUoa2V5LCBqYlsiY29uZmlnIl1bImFjdGlvbnMiXVsidXNlcl9hY3Rpb25zIl1ba2V5XSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGRlc2MgPSAiW0Elc10iJShrZXkpCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIjxoMj4lcyBQZXJjZW50aWxlIFJlc3BvbnNlIFRpbWUgRGlzdHJpYnV0aW9uPC9oMj4iJShkZXNjKSkKCiAgICAgICAgICAgICNwcmludFN0cmVhbS5wcmludGxuKCI8cHJlPiIpCiAgICAgICAgICAgICNqaHgub3V0cHV0UGVyY2VudGlsZURpc3RyaWJ1dGlvbihwcmludFN0cmVhbSwgMTAwMC4wKQoKICAgICAgICAgICAgYm9zID0gQnl0ZUFycmF5T3V0cHV0U3RyZWFtKCkKICAgICAgICAgICAgb3ggPSBQcmludFN0cmVhbShib3MpCiAgICAgICAgICAgIGpoeC5vdXRwdXRQZXJjZW50aWxlRGlzdHJpYnV0aW9uKG94LCAxMDAwLjApCiAgICAgICAgICAgIG94LmZsdXNoKCkKICAgICAgICAgICAgb3guY2xvc2UoKQogICAgICAgICAgICBwdGV4dCA9IGJvcy50b1N0cmluZygpCiAgICAgICAgICAgIGxpbmVzID0gcHRleHQuc3BsaXQoJ1xuJykKICAgICAgICAgICAgdGNvdW50ID0gamh4LmdldFRvdGFsQ291bnQoKQogICAgICAgICAgICBoZWFkZXIgPSBUcnVlCiAgICAgICAgICAgIHJsaXN0ID0gW10KICAgICAgICAgICAgZm9yIGxpbmUgaW4gbGluZXM6CiAgICAgICAgICAgICAgaWYgbGVuKGxpbmUpID09IDA6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgIGlmIGxpbmVbMF0gIT0gIiMiOgogICAgICAgICAgICAgICAgZSA9IGxpbmUuc3BsaXQoKQogICAgICAgICAgICAgICAgaWYgaGVhZGVyOgogICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8dGFibGUgc3R5bGU9IndpZHRoOjYwMHB4Ij4nKQogICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgIDx0cj4nKQogICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRoPiVzPC90aD4nJShlWzBdKSkKICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0aD4lczwvdGg+JyUoZVsxXSkpCiAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgICA8dGg+JXM8L3RoPiclKGVbMl0pKQogICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRoPiVzPC90aD4nJShlWzNdKSkKICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0aD5BYm92ZUNvdW50PC90aD4nKQogICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgIDwvdHI+JykKICAgICAgICAgICAgICAgICAgaGVhZGVyID0gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgIGlmIGxlbihlKSA9PSAzOgogICAgICAgICAgICAgICAgICAgIGUuYXBwZW5kKCcnKQogICAgICAgICAgICAgICAgICBybGlzdC5hcHBlbmQoZSkKICAgICAgICAgICAgcmxpc3QucmV2ZXJzZSgpCiAgICAgICAgICAgIGZvciBlIGluIHJsaXN0OgogICAgICAgICAgICAgICAgbWFyayA9IEZhbHNlCiAgICAgICAgICAgICAgICBpZiBlWzFdLnN0YXJ0c3dpdGgoIjAuOTk5MCIpOgogICAgICAgICAgICAgICAgICAgIG1hcmsgPSBUcnVlCiAgICAgICAgICAgICAgICBpZiBlWzFdLnN0YXJ0c3dpdGgoIjAuOTkwIik6CiAgICAgICAgICAgICAgICAgICAgbWFyayA9IFRydWUKICAgICAgICAgICAgICAgIGlmIGVbMV0gPT0gIjAuOTUwMDAwMDAwMDAwIjoKICAgICAgICAgICAgICAgICAgICBtYXJrID0gVHJ1ZQogICAgICAgICAgICAgICAgaWYgZVsxXSA9PSAiMC45MDAwMDAwMDAwMDAiOgogICAgICAgICAgICAgICAgICAgIG1hcmsgPSBUcnVlCiAgICAgICAgICAgICAgICBpZiBlWzFdID09ICIwLjgwMDAwMDAwMDAwMCI6CiAgICAgICAgICAgICAgICAgICAgbWFyayA9IFRydWUKICAgICAgICAgICAgICAgIGlmIGVbMV0gPT0gIjAuNTAwMDAwMDAwMDAwIjoKICAgICAgICAgICAgICAgICAgICBtYXJrID0gVHJ1ZQogICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICA8dHI+JykKICAgICAgICAgICAgICAgIGlmIG1hcms6CiAgICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0ZD48bWFyaz4lczwvbWFyaz48L3RkPiclKGVbMF0pKQogICAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgICA8dGQ+PG1hcms+JXM8L21hcms+PC90ZD4nJShlWzFdKSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0ZD4lczwvdGQ+JyUoZVswXSkpCiAgICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0ZD4lczwvdGQ+JyUoZVsxXSkpCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRkPiVzPC90ZD4nJShlWzJdKSkKICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgICA8dGQ+JXM8L3RkPiclKGVbM10pKQogICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0ZD4lczwvdGQ+JyUodGNvdW50LWludChlWzJdKSkpCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgIDwvdHI+JykKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigiPC90YWJsZT4iKQoKICAgICAgICAgICAgI3ByaW50U3RyZWFtLnByaW50bG4oIjwvcHJlPiIpCgogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCI8L2JvZHk+IikKICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigiPC9odG1sPiIpCiAgICAgICAgICAgIHByaW50U3RyZWFtLmZsdXNoKCkKICAgICAgICAgICAgcHJpbnRTdHJlYW0uY2xvc2UoKQogICAgICAgICAgICBhdmdfYXBzID0gMC4wIGlmIHNteC5uYW1lIGluIFsib25TdGFydCIsICJvblN0b3AiXSBlbHNlIHNteC5udW1fYWN0aW9ucy9zbXguZHVyYXRpb24KICAgICAgICAgICAgaWYgc214Lm5hbWUgaW4gWyJvblN0YXJ0IiwgIm9uU3RvcCJdOgogICAgICAgICAgICAgICAgY3B1X3QgPSAiMDowMDowMCIKICAgICAgICAgICAgICAgIHNteC5jcHUgPSAwLjAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNwdV90ID0gc3RyX2Zyb21fY3B1X3RpbWVfbnMoc214LmNwdV90aW1lX25zKQogICAgICAgICAgICBodG1sID0gYmVuY2htYXJrX3N1bW1hcnlfcm93JShuYW1lMnMsdGV4dCxzbXgubnVtX2FjdGlvbnMsc214Lm51bV9mYWlsZWQsc3RyKGRhdGV0aW1lLnRpbWVkZWx0YShzZWNvbmRzPWludChzbS5kdXJhdGlvbikpKSxhdmdfYXBzLGpoeC5nZXRNZWFuKCkvMTAwMC4wLGpoeC5nZXRTdGREZXZpYXRpb24oKS8xMDAwLjAsc214Lm1pbl9ydCxqaHguZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTAuMCkvMTAwMC4wLGpoeC5nZXRWYWx1ZUF0UGVyY2VudGlsZSg5OS4wKS8xMDAwLjAsc214Lm1heF9ydCxzbXgubWF4X3J0X3RzWzg6XSxzbXguYXZnX3FzLHNteC5tYXhfcXMsc214Lm1heF9hd3Qsc214Lm1heF93dCxjcHVfdCxzbXguY3B1LHNteC5tZW0pCiAgICAgICAgICAgIGlmIG5vdCBwcmludF9kZXRhaWxfcm93czoKICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjxiPiIsIiIpCiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L2I+IiwiIikKICAgICAgICAgICAgIyBSZW1vdmUgdGFnMQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8dGFnMT4iLCIiKQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L3RhZzE+IiwiIikKICAgICAgICAgICAgIyBSZW1vdmUgdGFnMgogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8dGFnMj4iLCIiKQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L3RhZzI+IiwiIikKCiAgICAgICAgICAgIHByaW50ZihodG1sKQogICAgICAgICAgICBpZiBsZW4obmFtZTJzX2xpc3QpID4gMDoKICAgICAgICAgICAgICAgIG5hbWUycyA9IG5hbWUyc19saXN0WzBdCiAgICAgICAgICAgICAgICBkZWwgbmFtZTJzX2xpc3RbMF0KCiAgICAgICAgICAgIHBhZ2VfaWQgKz0gMQoKICAgIHByaW50ZihoZWFkZXIucmVwbGFjZSgiX19ERVNDMV9fIiwgZGVzYzEpLnJlcGxhY2UoIl9fREVTQzJfXyIsIGRlc2MyKSkKCiAgICBwcmV2X3Jvd19pZCA9IDAKICAgIGZvciBlIGluIHJiOgogICAgICAgIGN1cnJlbnRfcm93X2lkID0gaW50KGVbInJvd19pZCJdKQogICAgICAgIGlmIGN1cnJlbnRfcm93X2lkIDw9IHByZXZfcm93X2lkOgogICAgICAgICAgICBpZiBzbSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHByaW50X2FjdGlvbl9zdW1tYXJ5KCkKICAgICAgICAgICAgICAgIHByaW50X2dsb2JhbF9zdW1tYXJ5KCkKICAgICAgICAgICAgICAgIHByaW50ZihiZW5jaG1hcmtfZW1wdHlfcm93KQogICAgICAgICAgICAgICAgcHJpbnRmKGJlbmNobWFya19jb2x1bW5zKQogICAgICAgICAgICBzbSA9IFN1bW1hcnkoKQogICAgICAgICAgICBzbS5uYW1lID0gZVsiYm1fbmFtZSJdCiAgICAgICAgICAgIGpoLnJlc2V0KCkKICAgICAgICAgICAgYmVuY2htYXJrX2lkICs9IDEKICAgICAgICAgICAgamhoID0ge30KICAgICAgICAgICAganNzID0ge30KICAgICAgICAgICAgcHJpbnRmKGJlbmNobWFya19oZWFkZXIlKGVbImJtX25hbWUiXSkpCiAgICAgICAgICAgIGlmIGxlbihlWyJ3b3JrZmxvd19uYW1lIl0pID4gMDoKICAgICAgICAgICAgICAgIG5hbWUyc19saXN0ID0gWyJ1OiVkLCB0OiVkIiUoZVsibnVtX3VzZXJzIl0sZVsibnVtX3RocmVhZHMiXSksICJ3OiVzIiUoZVsid29ya2Zsb3dfbmFtZSJdKSwgImM6JWQiJShlWyJjb250ZXh0X2lkIl0pICwiIl0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG5hbWUyc19saXN0ID0gWyJ1OiVkLCB0OiVkIiUoZVsibnVtX3VzZXJzIl0sZVsibnVtX3RocmVhZHMiXSksICJjOiVkIiUoZVsiY29udGV4dF9pZCJdKSwiIl0KICAgICAgICAgICAgbmFtZTJzID0gbmFtZTJzX2xpc3RbMF0KICAgICAgICAgICAgZGVsIG5hbWUyc19saXN0WzBdCiAgICAgICAgaHQgPSBIaXN0b2dyYW0uZnJvbVN0cmluZyhlWyJoaXN0b2dyYW1fcnQiXSkKICAgICAgICBqaC5hZGQoaHQpCiAgICAgICAgcF9tZW0gPSAxMDAuMCAqIGVbImp2bV9tZW1vcnlfdXNlZCJdIC8gZVsianZtX21lbW9yeV9tYXhpbXVtIl0KICAgICAgICBwX2NwdSA9IGVbInByb2Nlc3NfY3B1X3V0aWxpemF0aW9uIl0KICAgICAgICBpZiBlWyJibV9uYW1lIl0gaW4gWyJvblN0YXJ0IiwgIm9uU3RvcCJdOgogICAgICAgICAgICBjcHVfdCA9ICIwOjAwOjAwIgogICAgICAgICAgICBwX2NwdSA9IDAuMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNwdV90ID0gc3RyX2Zyb21fY3B1X3RpbWVfbnMoZVsicHJvY2Vzc19jcHVfdGltZV9ucyJdKQogICAgICAgICAgICBwX2NwdSA9IGVbInByb2Nlc3NfY3B1X3V0aWxpemF0aW9uIl0KICAgICAgICBpZiBwcmludF9kZXRhaWxfcm93czoKICAgICAgICAgICAgcHJpbnRmKGJlbmNobWFya19kZXRhaWxfcm93JSggXAogICAgICAgICAgICAgICAgbmFtZTJzLAogICAgICAgICAgICAgICAgZVsicm93X2lkIl0rMSwKICAgICAgICAgICAgICAgIGVbIm51bV9hY3Rpb25zIl0sCiAgICAgICAgICAgICAgICBlWyJudW1fZmFpbGVkIl0sCiAgICAgICAgICAgICAgICBzdHIoZGF0ZXRpbWUudGltZWRlbHRhKHNlY29uZHM9aW50KGVbImR1cmF0aW9uIl0pKSksCiAgICAgICAgICAgICAgICAwLjAgaWYgZVsiYm1fbmFtZSJdIGluIFsib25TdGFydCIsICJvblN0b3AiXSBlbHNlIGVbImF2Z19hcHMiXSwKICAgICAgICAgICAgICAgIGVbImF2Z19ydCJdLAogICAgICAgICAgICAgICAgaHQuZ2V0U3RkRGV2aWF0aW9uKCkvMTAwMC4wLAogICAgICAgICAgICAgICAgZVsibWluX3J0Il0sCiAgICAgICAgICAgICAgICBlWyJwZXJjZW50aWxlc19ydCJdWyI5MC4wIl0sCiAgICAgICAgICAgICAgICBlWyJwZXJjZW50aWxlc19ydCJdWyI5OS4wIl0sCiAgICAgICAgICAgICAgICBlWyJtYXhfcnQiXSwKICAgICAgICAgICAgICAgIGVbIm1heF9ydF90cyJdWzg6XSwKICAgICAgICAgICAgICAgIGVbImF2Z193dGhyZWFkX3FzaXplIl0sCiAgICAgICAgICAgICAgICBlWyJtYXhfd3RocmVhZF9xc2l6ZSJdLAogICAgICAgICAgICAgICAgZVsiYXZnX3d0Il0sCiAgICAgICAgICAgICAgICBlWyJtYXhfd3QiXSwKICAgICAgICAgICAgICAgIGNwdV90LAogICAgICAgICAgICAgICAgcF9jcHUsCiAgICAgICAgICAgICAgICBwX21lbQogICAgICAgICAgICAgICAgKSkKICAgICAgICAgICAgaWYgbGVuKG5hbWUyc19saXN0KSA+IDA6CiAgICAgICAgICAgICAgICBuYW1lMnMgPSBuYW1lMnNfbGlzdFswXQogICAgICAgICAgICAgICAgZGVsIG5hbWUyc19saXN0WzBdCiAgICAgICAgaWYgc20ubWluX3J0ID4gZVsibWluX3J0Il06CiAgICAgICAgICAgIHNtLm1pbl9ydCA9IGVbIm1pbl9ydCJdCiAgICAgICAgaWYgc20ubWF4X3J0IDwgZVsibWF4X3J0Il06CiAgICAgICAgICAgIHNtLm1heF9ydCA9IGVbIm1heF9ydCJdCiAgICAgICAgICAgIHNtLm1heF9ydF90cyA9IGVbIm1heF9ydF90cyJdCiAgICAgICAgc20ubnVtX2FjdGlvbnMgKz0gZVsibnVtX2FjdGlvbnMiXQogICAgICAgIHNtLm51bV9mYWlsZWQgKz0gZVsibnVtX2ZhaWxlZCJdCiAgICAgICAgc20uZHVyYXRpb24gKz0gZVsiZHVyYXRpb24iXQogICAgICAgIGlmIHNtLmF2Z19xcyA8IGVbImF2Z193dGhyZWFkX3FzaXplIl06CiAgICAgICAgICAgIHNtLmF2Z19xcyA9IGVbImF2Z193dGhyZWFkX3FzaXplIl0KICAgICAgICBpZiBzbS5tYXhfcXMgPCBlWyJtYXhfd3RocmVhZF9xc2l6ZSJdOgogICAgICAgICAgICBzbS5tYXhfcXMgPSBlWyJtYXhfd3RocmVhZF9xc2l6ZSJdCiAgICAgICAgaWYgc20ubWF4X2F3dCA8IGVbImF2Z193dCJdOgogICAgICAgICAgICBzbS5tYXhfYXd0ID0gZVsiYXZnX3d0Il0KICAgICAgICBpZiBzbS5tYXhfd3QgPCBlWyJtYXhfd3QiXToKICAgICAgICAgICAgc20ubWF4X3d0ID0gZVsibWF4X3d0Il0KICAgICAgICBpZiBzbS5tZW0gPCBwX21lbToKICAgICAgICAgICAgc20ubWVtID0gcF9tZW0KICAgICAgICBpZiBzbS5jcHUgPCBwX2NwdToKICAgICAgICAgICAgc20uY3B1ID0gcF9jcHUKICAgICAgICBzbS5jcHVfdGltZV9ucyArPSBlWyJwcm9jZXNzX2NwdV90aW1lX25zIl0KCiAgICAgICAgaWYgbGVuKHNtLmNoYXJ0X3RfbGlzdCkgPT0gLTE6CiAgICAgICAgICAgIHNtLmNoYXJ0X3RfbGlzdC5hcHBlbmQoCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICclcyclKGVbInRlc3RfYmVnaW4iXS5yZXBsYWNlKCJfIiwgIlQiKSksCiAgICAgICAgICAgICAgICBmbG9hdCgiJS4xZiIlKGVbImF2Z19hcHMiXSkpLAogICAgICAgICAgICAgICAgZmxvYXQoIiUuM2YiJShlWyJudW1fZmFpbGVkIl0vZVsiZHVyYXRpb24iXSkpCiAgICAgICAgICAgIF0pCgogICAgICAgIHNtLmNoYXJ0X3RfbGlzdC5hcHBlbmQoCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICclcyclKGVbInRlc3RfZW5kIl0ucmVwbGFjZSgiXyIsICJUIikpLAogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJhdmdfYXBzIl0pKSwKICAgICAgICAgICAgICAgIGZsb2F0KCIlLjNmIiUoZVsibnVtX2ZhaWxlZCJdL2VbImR1cmF0aW9uIl0pKQogICAgICAgICAgICAgXSkKCiAgICAgICAgIyBbJzIwMTgtMDQtMTBUMjA6NDA6MzNaJywgMSwgNSwgMTAsIDIwLCAyNSwgMzAgXQogICAgICAgIGlmIGxlbihzbS5jaGFydF9wX2xpc3QpID09IC0xOgogICAgICAgICAgICBzbS5jaGFydF9wX2xpc3QuYXBwZW5kKAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICclcyclKGVbInRlc3RfYmVnaW4iXS5yZXBsYWNlKCJfIiwgIlQiKSksCiAgICAgICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJtaW5fcnQiXSkpLAogICAgICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoZVsiYXZnX3J0Il0pKSwKICAgICAgICAgICAgICAgICAgICBmbG9hdCgiJS4xZiIlKGh0LmdldFZhbHVlQXRQZXJjZW50aWxlKDkwLjApLzEwMDAuMCkpLAogICAgICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoaHQuZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTUuMCkvMTAwMC4wKSksCiAgICAgICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShodC5nZXRWYWx1ZUF0UGVyY2VudGlsZSg5OS4wKS8xMDAwLjApKSwKICAgICAgICAgICAgICAgICAgICBmbG9hdCgiJS4xZiIlKGVbIm1heF9ydCJdKSkKICAgICAgICAgICAgICAgIF0pCgogICAgICAgIHNtLmNoYXJ0X3BfbGlzdC5hcHBlbmQoCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICclcyclKGVbInRlc3RfZW5kIl0ucmVwbGFjZSgiXyIsICJUIikpLAogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJtaW5fcnQiXSkpLAogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJhdmdfcnQiXSkpLAogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShodC5nZXRWYWx1ZUF0UGVyY2VudGlsZSg5MC4wKS8xMDAwLjApKSwKICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoaHQuZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTUuMCkvMTAwMC4wKSksCiAgICAgICAgICAgICAgICBmbG9hdCgiJS4xZiIlKGh0LmdldFZhbHVlQXRQZXJjZW50aWxlKDk5LjApLzEwMDAuMCkpLAogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJtYXhfcnQiXSkpCiAgICAgICAgICAgIF0pCgogICAgICAgICMgamhoIC4uLgogICAgICAgIGZvciBrZXkgaW4gZVsidXNlcl9hY3Rpb25zIl0ua2V5cygpOgogICAgICAgICAgICBhciA9IGVbInVzZXJfYWN0aW9ucyJdW2tleV0KICAgICAgICAgICAgaHR0ID0gSGlzdG9ncmFtLmZyb21TdHJpbmcoYXJbImhpc3RvZ3JhbV9ydCJdKQogICAgICAgICAgICAjcHJpbnQoYXJbIm5hbWUiXSArICIgLSAiICsgIiUuM2YiJShodHQuZ2V0TWVhbigpLzEwMDAuMCkpCiAgICAgICAgICAgIGlmIGpoaC5oYXNfa2V5KGtleSk6CiAgICAgICAgICAgICAgICBqaGhba2V5XS5hZGQoaHR0KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgamhoW2tleV0gPSBIaXN0b2dyYW0oMSwgMzYwMCoxMDAwKjEwMDAsIDMpCiAgICAgICAgICAgICAgICBqaGhba2V5XS5hZGQoaHR0KQogICAgICAgICAgICAjcHJpbnQoYXJbIm5hbWUiXSArICIgLSAiICsgIiUuM2YiJShqaGhba2V5XS5nZXRNZWFuKCkvMTAwMC4wKSArICIgLSAlZCIlKGpoaFtrZXldLmdldFRvdGFsQ291bnQoKSkpCgogICAgICAgICMganNzIC4uLgogICAgICAgIGZvciBrZXkgaW4gZVsidXNlcl9hY3Rpb25zIl0ua2V5cygpOgogICAgICAgICAgICBhciA9IGVbInVzZXJfYWN0aW9ucyJdW2tleV0KICAgICAgICAgICAgaWYganNzLmhhc19rZXkoa2V5KToKICAgICAgICAgICAgICAgIHNteCA9IGpzc1trZXldCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzbXggPSBqc3Nba2V5XSA9IFN1bW1hcnkoKQogICAgICAgICAgICAgICAgc214Lm5hbWUgPSBlWyJibV9uYW1lIl0KCiAgICAgICAgICAgIGlmIHNteC5taW5fcnQgPiBhclsibWluX3J0Il06CiAgICAgICAgICAgICAgICBzbXgubWluX3J0ID0gYXJbIm1pbl9ydCJdCiAgICAgICAgICAgIGlmIHNteC5tYXhfcnQgPCBhclsibWF4X3J0Il06CiAgICAgICAgICAgICAgICBzbXgubWF4X3J0ID0gYXJbIm1heF9ydCJdCiAgICAgICAgICAgICAgICBzbXgubWF4X3J0X3RzID0gYXJbIm1heF9ydF90cyJdCiAgICAgICAgICAgIHNteC5udW1fYWN0aW9ucyArPSBhclsibnVtX2FjdGlvbnMiXQogICAgICAgICAgICBzbXgubnVtX2ZhaWxlZCArPSBhclsibnVtX2ZhaWxlZCJdCgogICAgICAgICAgICBzbXguZHVyYXRpb24gKz0gZVsiZHVyYXRpb24iXQogICAgICAgICAgICBpZiBzbXguYXZnX3FzIDwgZVsiYXZnX3d0aHJlYWRfcXNpemUiXToKICAgICAgICAgICAgICAgIHNteC5hdmdfcXMgPSBlWyJhdmdfd3RocmVhZF9xc2l6ZSJdCiAgICAgICAgICAgIGlmIHNteC5tYXhfcXMgPCBlWyJtYXhfd3RocmVhZF9xc2l6ZSJdOgogICAgICAgICAgICAgICAgc214Lm1heF9xcyA9IGVbIm1heF93dGhyZWFkX3FzaXplIl0KICAgICAgICAgICAgaWYgc214Lm1heF9hd3QgPCBlWyJhdmdfd3QiXToKICAgICAgICAgICAgICAgIHNteC5tYXhfYXd0ID0gZVsiYXZnX3d0Il0KICAgICAgICAgICAgaWYgc214Lm1heF93dCA8IGVbIm1heF93dCJdOgogICAgICAgICAgICAgICAgc214Lm1heF93dCA9IGVbIm1heF93dCJdCiAgICAgICAgICAgIGlmIHNteC5tZW0gPCBwX21lbToKICAgICAgICAgICAgICAgIHNteC5tZW0gPSBwX21lbQogICAgICAgICAgICBpZiBzbXguY3B1IDwgcF9jcHU6CiAgICAgICAgICAgICAgICBzbXguY3B1ID0gcF9jcHUKICAgICAgICAgICAgc214LmNwdV90aW1lX25zICs9IGVbInByb2Nlc3NfY3B1X3RpbWVfbnMiXQoKICAgIHByaW50X2FjdGlvbl9zdW1tYXJ5KCkKICAgIHByaW50X2dsb2JhbF9zdW1tYXJ5KCkKICAgIHByaW50Zih0cmFpbGVyKQoKICAgIHJlcG9ydF9maC5jbG9zZSgpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgaWYgbGVuKHN5cy5hcmd2KSA+PSAzOgogICAgICAgIGZpbGVuYW1lID0gc3lzLmFyZ3ZbMV0KICAgICAgICBjb25maWdGaWxlbmFtZSA9IHN5cy5hcmd2WzJdCiAgICAgICAgY3JlYXRlUmVwb3J0KGZpbGVuYW1lLCBjb25maWdGaWxlbmFtZSkK";

  public static void main(String... args) {
    String mainScriptFilename = "report.py";
    String mainScript = "";
    String jythonArgsScript = "";
    for (String arg : args) {
      // System.out.println("Java: " + arg);
      if (jythonArgsScript.length() == 0) {
        if (!arg.equals(mainScriptFilename)) {
          jythonArgsScript += "'" + mainScriptFilename + "', ";
        }
      } else {
        jythonArgsScript += ", ";
      }
      jythonArgsScript += "'" + arg + "'";
    }
    if (jythonArgsScript.length() == 0) {
      jythonArgsScript = "'" + mainScriptFilename + "'";
    }
    jythonArgsScript = "import sys; sys.argv = [" + jythonArgsScript + "]";
    {
      byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
      String text = new String(decodedBytes);
      // System.out.println("===");
      // System.out.println(text);
      // System.out.println("===");
      mainScript = text;
    }
    // System.out.println("args --> " + jythonArgsScript);
    {
      // run script
      PythonInterpreter pyInterp = new PythonInterpreter();
      // initialize args
      pyInterp.exec(jythonArgsScript);
      // run script
      // pyInterp.exec("__name__=""");
      pyInterp.exec(mainScript);
    }
    // jython.main(args);
  }
}
