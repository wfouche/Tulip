package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS io.github.wfouche.tulip:tulip-runtime:2.1.12-dev
//DEPS org.python:jython-slim:2.7.4
//JAVA 21
// spotless:on

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import org.python.util.PythonInterpreter;

/**
 * The class provides a main method to run a Python script embedded in a Java application.
 *
 * <p>This class is generated by JBang from a Python script.
 */
public class report_py {

    /** The base64 encoded Python script to be executed. */
    public static String mainScriptTextBase64 =
            "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";

    /** Private constructor to prevent instantiation. */
    public report_py() {
        // Private constructor to prevent instantiation
    }

    /**
     * Decompresses a byte array that was compressed using GZIP.
     *
     * @param compressedData The byte array containing the compressed data.
     * @return The decompressed string.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static String decompress(byte[] compressedData) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);
        GZIPInputStream gzip = new GZIPInputStream(bis);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzip.read(buffer)) != -1) {
            bos.write(buffer, 0, len);
        }
        gzip.close();
        bis.close();
        bos.close();
        return bos.toString(StandardCharsets.UTF_8.name());
    }

    /**
     * The main method that serves as the entry point for the application. It initializes the Python
     * interpreter and executes the embedded script.
     *
     * @param args Command-line arguments passed to the application.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static void main(String... args) throws IOException {
        String mainScriptFilename = "report.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decompress(decodedBytes));
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
