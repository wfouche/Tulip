package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS org.python:jython-slim:2.7.4
//JAVA 21
// spotless:on

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import org.python.util.PythonInterpreter;

/**
 * The class provides a main method to run a Python script embedded in a Java application.
 *
 * <p>This class is generated by JBang from a Python script.
 */
public class report2_py {

    /** The base64 encoded Python script to be executed. */
    public static String mainScriptTextBase64 =
            "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";

    /** Private constructor to prevent instantiation. */
    public report2_py() {
        // Private constructor to prevent instantiation
    }

    /**
     * Decompresses a byte array that was compressed using GZIP.
     *
     * @param compressedData The byte array containing the compressed data.
     * @return The decompressed string.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static String decompress(byte[] compressedData) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);
        GZIPInputStream gzip = new GZIPInputStream(bis);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzip.read(buffer)) != -1) {
            bos.write(buffer, 0, len);
        }
        gzip.close();
        bis.close();
        bos.close();
        return bos.toString(StandardCharsets.UTF_8.name());
    }

    /**
     * The main method that serves as the entry point for the application. It initializes the Python
     * interpreter and executes the embedded script.
     *
     * @param args Command-line arguments passed to the application.
     * @throws IOException Due to decompress failure.
     */
    public static void main(String... args) throws IOException {
        String mainScriptFilename = "report2.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decompress(decodedBytes));
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
