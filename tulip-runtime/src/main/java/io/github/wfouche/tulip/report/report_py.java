package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
// DEPS com.google.code.gson:gson:2.13.1
// DEPS org.hdrhistogram:HdrHistogram:2.2.2
// DEPS org.python:jython-slim:2.7.4
// JAVA 21
// spotless:on

import java.util.Base64;
import org.python.util.PythonInterpreter;

public class report_py {

    public static String mainScriptTextBase64 =
            "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbg0KaW1wb3J0IGRhdGV0aW1lDQppbXBvcnQganNvbg0KaW1wb3J0IHN5cw0KaW1wb3J0IG9yZy5IZHJIaXN0b2dyYW0uSGlzdG9ncmFtIGFzIEhpc3RvZ3JhbQ0KaW1wb3J0IG9zDQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdA0KaW1wb3J0IGphdmEuaW8uUHJpbnRTdHJlYW0gYXMgUHJpbnRTdHJlYW0NCmltcG9ydCBqYXZhLmlvLkJ5dGVBcnJheU91dHB1dFN0cmVhbSBhcyBCeXRlQXJyYXlPdXRwdXRTdHJlYW0NCg0KIyAvLy8gamJhbmcNCiMgcmVxdWlyZXMtanl0aG9uID0gIj09Mi43LjQiDQojIHJlcXVpcmVzLWphdmEgPSAiPj0yMSINCiMgZGVwZW5kZW5jaWVzID0gWw0KIyAgICJjb20uZ29vZ2xlLmNvZGUuZ3Nvbjpnc29uOjIuMTMuMSIsDQojICAgIm9yZy5oZHJoaXN0b2dyYW06SGRySGlzdG9ncmFtOjIuMi4yIg0KIyBdDQojIFtweXRob24tanZtXQ0KIyAgIGRlYnVnID0gZmFsc2UNCiMgLy8vDQoNCnN1bW1hcnlfaHRtbF8xID0gJycnPCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KPG1ldGEgY2hhcnNldD0iVVRGLTgiPg0KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICBkaXYuaGlzdG8gew0KICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW4NCiAgICB9DQo8L3N0eWxlPg0KDQo8IS0tTG9hZCB0aGUgQUpBWCBBUEktLT4NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vanNhcGkiPjwvc2NyaXB0Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICBpZiAod2luZG93LkZpbGUgJiYgd2luZG93LkZpbGVSZWFkZXIgJiYgd2luZG93LkZpbGVMaXN0ICYmIHdpbmRvdy5CbG9iKSB7DQogICAgICAgIC8vIEdyZWF0IHN1Y2Nlc3MhIEFsbCB0aGUgRmlsZSBBUElzIGFyZSBzdXBwb3J0ZWQuDQogICAgfSBlbHNlIHsNCiAgICAgICAgYWxlcnQoJ1RoZSBGaWxlIEFQSXMgYXJlIG5vdCBmdWxseSBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyLicpOw0KICAgIH0NCg0KICAgIC8vIExvYWQgdGhlIFZpc3VhbGl6YXRpb24gQVBJIGFuZCB0aGUgY29yZWNoYXJ0IHBhY2thZ2UuDQogICAgZ29vZ2xlLmxvYWQoJ3Zpc3VhbGl6YXRpb24nLCAnMS4wJywgeydwYWNrYWdlcyc6Wydjb3JlY2hhcnQnXX0pOw0KDQogICAgLy8gU2V0IGEgY2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIEdvb2dsZSBWaXN1YWxpemF0aW9uIEFQSSBpcyBsb2FkZWQuDQogICAgZ29vZ2xlLnNldE9uTG9hZENhbGxiYWNrKGRyYXdJbml0aWFsQ2hhcnQpOw0KDQogICAgdmFyIGNoYXJ0RGF0YSA9IG51bGw7DQogICAgdmFyIGNoYXJ0ID0gbnVsbDsNCg0KICAgIGZ1bmN0aW9uIHNldENoYXJ0RGF0YShuYW1lcywgaGlzdG9zKSB7DQogICAgICAgIHdoaWxlIChuYW1lcy5sZW5ndGggPCBoaXN0b3MubGVuZ3RoKSB7DQogICAgICAgICAgICBuYW1lcy5wdXNoKCdVbmtub3duJyk7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgc2VyaWVzID0gW107DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGlzdG9zLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICBzZXJpZXMgPSBhcHBlbmREYXRhU2VyaWVzKGhpc3Rvc1tpXSwgbmFtZXNbaV0sIHNlcmllcyk7DQogICAgICAgIH0NCg0KICAgICAgICBjaGFydERhdGEgPSBnb29nbGUudmlzdWFsaXphdGlvbi5hcnJheVRvRGF0YVRhYmxlKHNlcmllcyk7DQogICAgfQ0KDQonJycNCg0KdGV4dF9ibG9ja18xID0gJycnDQogICAgZnVuY3Rpb24gZHJhd0luaXRpYWxDaGFydCgpIHsNCiAgICAgICAgLy8gQ29ubmVjdCB0aGUgY2hvb3NlIGZpbGVzIGJ1dHRvbjoNCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVzJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlRmlsZVNlbGVjdCwgZmFsc2UpOw0KDQogICAgICAgIC8vIExvYWQgc29tZSBzdGF0aWMgZXhhbXBsZSBkYXRhOg0KICAgICAgICB2YXIgZGF0YTFTdHIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJkaXYjZGF0YV8xIikuaW5uZXJIVE1MLnRyaW0oKTsNCiAgICAgICAgdmFyIGRhdGEyU3RyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiZGl2I2RhdGFfMiIpLmlubmVySFRNTC50cmltKCk7DQogICAgICAgIHZhciBkYXRhM1N0ciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImRpdiNkYXRhXzMiKS5pbm5lckhUTUwudHJpbSgpOw0KICAgICAgICB2YXIgaGlzdG9zID0gW2RhdGEzU3RyLCBkYXRhMlN0ciwgZGF0YTFTdHJdOw0KICAgICAgICB2YXIgbmFtZXMgPSBbJ0EnLCAnQicsICdDJ107DQoNCiAgICAgICAgc2V0Q2hhcnREYXRhKG5hbWVzLCBoaXN0b3MpOw0KICAgICAgICBkcmF3Q2hhcnQoKTsNCiAgICB9DQonJycNCg0Kc3VtbWFyeV9odG1sXzIgPSAnJycNCiAgICB2YXIgbWF4UGVyY2VudGlsZSA9IDEwMDAwMDA7DQoNCiAgICBmdW5jdGlvbiBkcmF3Q2hhcnQoKSB7DQoNCiAgICAgICAgdmFyIHRpY2tzID0NCiAgICAgICAgICAgICAgICBbe3Y6MSxmOicwJSd9LA0KICAgICAgICAgICAgICAgICAgICB7djoxMCxmOic5MCUnfSwNCiAgICAgICAgICAgICAgICAgICAge3Y6MTAwLGY6Jzk5JSd9LA0KICAgICAgICAgICAgICAgICAgICB7djoxMDAwLGY6Jzk5LjklJ30sDQogICAgICAgICAgICAgICAgICAgIHt2OjEwMDAwLGY6Jzk5Ljk5JSd9LA0KICAgICAgICAgICAgICAgICAgICB7djoxMDAwMDAsZjonOTkuOTk5JSd9LA0KICAgICAgICAgICAgICAgICAgICB7djoxMDAwMDAwLGY6Jzk5Ljk5OTklJ30sDQogICAgICAgICAgICAgICAgICAgIHt2OjEwMDAwMDAwLGY6Jzk5Ljk5OTk5JSd9LA0KICAgICAgICAgICAgICAgICAgICB7djoxMDAwMDAwMDAsZjonOTkuOTk5OTk5JSd9XTsNCg0KICAgICAgICB2YXIgdW5pdFNlbGVjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0aW1lVW5pdFNlbGVjdGlvbiIpOw0KICAgICAgICB2YXIgdW5pdFNlbEluZGV4ID0gdW5pdFNlbGVjdGlvbi5zZWxlY3RlZEluZGV4Ow0KICAgICAgICB2YXIgdW5pdFRleHQgPSB1bml0U2VsZWN0aW9uLm9wdGlvbnNbdW5pdFNlbEluZGV4XS5pbm5lckhUTUw7DQoNCiAgICAgICAgdmFyIG9wdGlvbnMgPSB7DQovLyAgICAgICAgICAgIHRpdGxlOiAnUGVyY2VudGlsZSBSZXNwb25zZSBUaW1lIERpc3RyaWJ1dGlvbicsDQogICAgICAgICAgICBoZWlnaHQ6IDQ4MCwNCi8vICAgICAgICAgICAgaEF4aXM6IHt0aXRsZTogJ1BlcmNlbnRpbGUnLCBtaW5WYWx1ZTogMCwgbG9nU2NhbGU6IHRydWUsIHRpY2tzOnRpY2tzIH0sDQogICAgICAgICAgICBoQXhpczogew0KICAgICAgICAgICAgICAgIHRpdGxlOiAiUGVyY2VudGlsZSIsDQogICAgICAgICAgICAgICAgbWluVmFsdWU6IDEsIGxvZ1NjYWxlOiB0cnVlLCB0aWNrczp0aWNrcywNCiAgICAgICAgICAgICAgICB2aWV3V2luZG93TW9kZTonZXhwbGljaXQnLA0KICAgICAgICAgICAgICAgIHZpZXdXaW5kb3c6ew0KICAgICAgICAgICAgICAgICAgICBtYXg6bWF4UGVyY2VudGlsZSwNCiAgICAgICAgICAgICAgICAgICAgbWluOjENCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgdkF4aXM6IHt0aXRsZTogJ0xhdGVuY3kgKCcgKyB1bml0VGV4dCArICcpJywgbWluVmFsdWU6IDAgfSwNCiAgICAgICAgICAgIGxlZ2VuZDoge3Bvc2l0aW9uOiAnYm90dG9tJ30NCiAgICAgICAgfTsNCg0KDQogICAgICAgIC8vIGFkZCB0b29sdGlwcyB3aXRoIGNvcnJlY3QgcGVyY2VudGlsZSB0ZXh0IHRvIGRhdGE6DQogICAgICAgIHZhciBjb2x1bW5zID0gWzBdOw0KICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNoYXJ0RGF0YS5nZXROdW1iZXJPZkNvbHVtbnMoKTsgaSsrKSB7DQogICAgICAgICAgICBjb2x1bW5zLnB1c2goaSk7DQogICAgICAgICAgICBjb2x1bW5zLnB1c2goew0KICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLA0KICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsNCiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ3Rvb2x0aXAnDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBjYWxjOiAoZnVuY3Rpb24gKGopIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkdCwgcm93KSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudGlsZSA9IDEwMC4wIC0gKDEwMC4wL2R0LmdldFZhbHVlKHJvdywgMCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR0LmdldENvbHVtbkxhYmVsKGopICsgJzogJyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRpbGUudG9QcmVjaXNpb24oNykgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCVcXCdpbGUgPSAnICsgZHQuZ2V0VmFsdWUocm93LCBqKSArICcgJyArIHVuaXRUZXh0DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KShpKQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICAgICAgdmFyIHZpZXcgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVZpZXcoY2hhcnREYXRhKTsNCiAgICAgICAgdmlldy5zZXRDb2x1bW5zKGNvbHVtbnMpOw0KDQogICAgICAgIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkxpbmVDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRfZGl2JykpOw0KICAgICAgICBjaGFydC5kcmF3KHZpZXcsIG9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmV2ZW50cy5hZGRMaXN0ZW5lcihjaGFydCwgJ3JlYWR5JywgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgY2hhcnRfZGl2LmlubmVySFRNTCA9ICc8aW1nIHNyYz0iJyArIGNoYXJ0LmdldEltYWdlVVJJKCkgKyAnIj4nOw0KICAgICAgICB9KTsNCg0KICAgIH0NCjwvc2NyaXB0Pg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgIGZ1bmN0aW9uIGFwcGVuZERhdGFTZXJpZXMoaGlzdG8sIG5hbWUsIGRhdGFTZXJpZXMpIHsNCiAgICAgICAgdmFyIHNlcmllczsNCiAgICAgICAgdmFyIHNlcmllc0NvdW50Ow0KICAgICAgICBpZiAoZGF0YVNlcmllcy5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgc2VyaWVzID0gWyBbJ1gnLCBuYW1lXSBdOw0KICAgICAgICAgICAgc2VyaWVzQ291bnQgPSAxOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc2VyaWVzID0gZGF0YVNlcmllczsNCiAgICAgICAgICAgIHNlcmllc1swXS5wdXNoKG5hbWUpOw0KICAgICAgICAgICAgc2VyaWVzQ291bnQgPSBzZXJpZXNbMF0ubGVuZ3RoIC0gMTsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBsaW5lcyA9IGhpc3RvLnNwbGl0KCJcXG4iKTsNCg0KICAgICAgICB2YXIgc2VyaWVzSW5kZXggPSAxOw0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2ldLnRyaW0oKTsNCiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBsaW5lLnRyaW0oKS5zcGxpdCgvWyBdKy8pOw0KDQogICAgICAgICAgICBpZiAobGluZVswXSAhPSAnIycgJiYgdmFsdWVzLmxlbmd0aCA9PSA0KSB7DQoNCiAgICAgICAgICAgICAgICB2YXIgeSA9IHBhcnNlRmxvYXQodmFsdWVzWzBdKTsNCiAgICAgICAgICAgICAgICB2YXIgeCA9IHBhcnNlRmxvYXQodmFsdWVzWzNdKTsNCg0KICAgICAgICAgICAgICAgIGlmICghaXNOYU4oeCkgJiYgIWlzTmFOKHkpKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcmllc0luZGV4ID49IHNlcmllcy5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllcy5wdXNoKFt4XSk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2VyaWVzW3Nlcmllc0luZGV4XS5sZW5ndGggPCBzZXJpZXNDb3VudCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzW3Nlcmllc0luZGV4XS5wdXNoKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgc2VyaWVzW3Nlcmllc0luZGV4XS5wdXNoKHkpOw0KICAgICAgICAgICAgICAgICAgICBzZXJpZXNJbmRleCsrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHdoaWxlIChzZXJpZXNJbmRleCA8IHNlcmllcy5sZW5ndGgpIHsNCiAgICAgICAgICAgIHNlcmllc1tzZXJpZXNJbmRleF0ucHVzaChudWxsKTsNCiAgICAgICAgICAgIHNlcmllc0luZGV4Kys7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gc2VyaWVzOw0KICAgIH0NCjwvc2NyaXB0Pg0KPHNjcmlwdD4NCiAgICBmdW5jdGlvbiB0aW1lVW5pdHNTZWxlY3RlZChldnQpIHsNCiAgICAgICAgZHJhd0NoYXJ0KCk7DQogICAgICAgIHJldHVybiB7dHlwZWQ6ICcnfTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBkb0V4cG9ydChldmVudCkgew0KICAgICAgICBzYXZlU3ZnQXNQbmcoZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3ZnJyksICdIaXN0b2dyYW0nLCAyLjApOw0KICAgICAgICByZXR1cm4ge3R5cGVkOiAnJ307DQogICAgfQ0KPC9zY3JpcHQ+DQoNCjxzY3JpcHQ+DQogICAgZnVuY3Rpb24gaGFuZGxlRmlsZVNlbGVjdChldnQpIHsNCiAgICAgICAgdmFyIGZpbGVzID0gZXZ0LnRhcmdldC5maWxlczsgLy8gRmlsZUxpc3Qgb2JqZWN0DQogICAgICAgIHZhciBmaWxlRGlzcGxheUFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZURpc3BsYXlBcmVhJyk7DQoNCiAgICAgICAgdmFyIG5hbWVzID0gW107DQogICAgICAgIHZhciBoaXN0b3MgPSBbXTsNCg0KICAgICAgICBmaWxlRGlzcGxheUFyZWEuaW5uZXJUZXh0ID0gImZpbGUgc2VsZWN0ZWQuLi5cXG4iOw0KDQogICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgRmlsZUxpc3QgYW5kIHJlbmRlciBpbWFnZSBmaWxlcyBhcyB0aHVtYm5haWxzLg0KICAgICAgICBmb3IgKHZhciBpID0gMCwgZjsgZiA9IGZpbGVzW2ldOyBpKyspIHsNCiAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOw0KDQogICAgICAgICAgICByZWFkZXIub25sb2FkID0gKGZ1bmN0aW9uKHRoZUZpbGUpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkgew0KICAgICAgICAgICAgICAgICAgICBoaXN0b3MucHVzaChlLnRhcmdldC5yZXN1bHQpOw0KICAgICAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKGVzY2FwZSh0aGVGaWxlLm5hbWUpKTsNCiAgICAgICAgICAgICAgICAgICAgZmlsZURpc3BsYXlBcmVhLmlubmVyVGV4dCA9ICIgUGxvdHRpbmcgaW5wdXQgZnJvbTogIiArIG5hbWVzICsgIlxcbiI7DQogICAgICAgICAgICAgICAgICAgIHNldENoYXJ0RGF0YShuYW1lcywgaGlzdG9zKTsNCiAgICAgICAgICAgICAgICAgICAgZHJhd0NoYXJ0KCk7DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0pKGYpOw0KDQogICAgICAgICAgICAvLyBSZWFkIGluIHRoZSBpbWFnZSBmaWxlIGFzIGEgZGF0YSBVUkwuDQogICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmKTsNCiAgICAgICAgfQ0KDQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgIChmdW5jdGlvbigpIHsNCiAgICAgICAgdmFyIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7DQoNCiAgICAgICAgdmFyIGRvY3R5cGUgPSAnPD94bWwgdmVyc2lvbj0iMS4wIiBzdGFuZGFsb25lPSJubyI/PjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+JzsNCg0KICAgICAgICBmdW5jdGlvbiBpbmxpbmVJbWFnZXMoY2FsbGJhY2spIHsNCiAgICAgICAgICAgIHZhciBpbWFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdmcgaW1hZ2UnKTsNCiAgICAgICAgICAgIHZhciBsZWZ0ID0gaW1hZ2VzLmxlbmd0aDsNCiAgICAgICAgICAgIGlmIChsZWZ0ID09IDApIHsNCiAgICAgICAgICAgICAgICBjYWxsYmFjaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAoZnVuY3Rpb24oaW1hZ2UpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLmdldEF0dHJpYnV0ZSgneGxpbms6aHJlZicpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHJlZiA9IGltYWdlLmdldEF0dHJpYnV0ZSgneGxpbms6aHJlZicpLnZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eaHR0cC8udGVzdChocmVmKSAmJiAhKG5ldyBSZWdFeHAoJ14nICsgd2luZG93LmxvY2F0aW9uLmhvc3QpLnRlc3QoaHJlZikpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgcmVuZGVyIGVtYmVkZGVkIGltYWdlcyBsaW5raW5nIHRvIGV4dGVybmFsIGhvc3RzLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7DQogICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBpbWFnZS5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKTsNCiAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHQ7DQogICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnLCBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LS07DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVmdCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pKGltYWdlc1tpXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBzdHlsZXMoZG9tKSB7DQogICAgICAgICAgICB2YXIgY3NzID0gIiI7DQogICAgICAgICAgICB2YXIgc2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHM7DQogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoZWV0cy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGlmIChzaGVldHNbaV0uaGFzT3duUHJvcGVydHkoJ2Nzc1J1bGVzJykpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGVzID0gc2hlZXRzW2ldLmNzc1J1bGVzOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJ1bGVzLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2pdOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZihydWxlLnN0eWxlKSAhPSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcyArPSBydWxlLnNlbGVjdG9yVGV4dCArICIgeyAiICsgcnVsZS5zdHlsZS5jc3NUZXh0ICsgIiB9XFxuIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOw0KICAgICAgICAgICAgcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTsNCiAgICAgICAgICAgIHMuaW5uZXJIVE1MID0gIjwhW0NEQVRBW1xcbiIgKyBjc3MgKyAiXFxuXV0+IjsNCg0KICAgICAgICAgICAgdmFyIGRlZnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkZWZzJyk7DQogICAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKHMpOw0KICAgICAgICAgICAgcmV0dXJuIGRlZnM7DQogICAgICAgIH0NCg0KICAgICAgICBvdXQkLnN2Z0FzRGF0YVVyaSA9IGZ1bmN0aW9uKGVsLCBzY2FsZUZhY3RvciwgY2IpIHsNCiAgICAgICAgICAgIHNjYWxlRmFjdG9yID0gc2NhbGVGYWN0b3IgfHwgMTsNCg0KICAgICAgICAgICAgaW5saW5lSW1hZ2VzKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHZhciBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOw0KICAgICAgICAgICAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSh0cnVlKTsNCiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUludCgNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLmdldEF0dHJpYnV0ZSgnd2lkdGgnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgfHwgY2xvbmUuc3R5bGUud2lkdGgNCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IG91dCQuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKQ0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KA0KICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgfHwgY2xvbmUuc3R5bGUuaGVpZ2h0DQogICAgICAgICAgICAgICAgICAgICAgICB8fCBvdXQkLmdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpDQogICAgICAgICAgICAgICAgKTsNCg0KICAgICAgICAgICAgICAgIHZhciB4bWxucyA9ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyI7DQoNCiAgICAgICAgICAgICAgICBjbG9uZS5zZXRBdHRyaWJ1dGUoInZlcnNpb24iLCAiMS4xIik7DQogICAgICAgICAgICAgICAgY2xvbmUuc2V0QXR0cmlidXRlTlMoeG1sbnMsICJ4bWxucyIsICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIpOw0KICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZU5TKHhtbG5zLCAieG1sbnM6eGxpbmsiLCAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIpOw0KICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgid2lkdGgiLCB3aWR0aCAqIHNjYWxlRmFjdG9yKTsNCiAgICAgICAgICAgICAgICBjbG9uZS5zZXRBdHRyaWJ1dGUoImhlaWdodCIsIGhlaWdodCAqIHNjYWxlRmFjdG9yKTsNCiAgICAgICAgICAgICAgICBjbG9uZS5zZXRBdHRyaWJ1dGUoInZpZXdCb3giLCAiMCAwICIgKyB3aWR0aCArICIgIiArIGhlaWdodCk7DQogICAgICAgICAgICAgICAgb3V0ZXIuYXBwZW5kQ2hpbGQoY2xvbmUpOw0KDQogICAgICAgICAgICAgICAgY2xvbmUuaW5zZXJ0QmVmb3JlKHN0eWxlcyhjbG9uZSksIGNsb25lLmZpcnN0Q2hpbGQpOw0KDQogICAgICAgICAgICAgICAgdmFyIHN2ZyA9IGRvY3R5cGUgKyBvdXRlci5pbm5lckhUTUw7DQogICAgICAgICAgICAgICAgdmFyIHVyaSA9ICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCcgKyB3aW5kb3cuYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3ZnKSkpOw0KICAgICAgICAgICAgICAgIGlmIChjYikgew0KICAgICAgICAgICAgICAgICAgICBjYih1cmkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgb3V0JC5zYXZlU3ZnQXNQbmcgPSBmdW5jdGlvbihlbCwgbmFtZSwgc2NhbGVGYWN0b3IpIHsNCiAgICAgICAgICAgIG91dCQuc3ZnQXNEYXRhVXJpKGVsLCBzY2FsZUZhY3RvciwgZnVuY3Rpb24odXJpKSB7DQogICAgICAgICAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7DQogICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJpOw0KICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7DQogICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoOw0KICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0Ow0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOw0KICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7DQogICAgICAgICAgICAgICAgICAgIGEuZG93bmxvYWQgPSBuYW1lOw0KICAgICAgICAgICAgICAgICAgICBhLmhyZWYgPSBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTsNCiAgICAgICAgICAgICAgICAgICAgYS5jbGljaygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgfSkoKTsNCjwvc2NyaXB0Pg0KDQo8c3R5bGU+DQogICAgLnNsaWRlci13aWR0aDUwMA0KICAgIHsNCiAgICAgICAgd2lkdGg6IDUwMHB4Ow0KICAgIH0NCjwvc3R5bGU+DQoNCjwvaGVhZD4NCg0KPGJvZHk+DQoNCl9fQ0hBUlRTX1RFWFRfXw0KDQo8aDI+UGVyY2VudGlsZSBSZXNwb25zZSBUaW1lIERpc3RyaWJ1dGlvbjwvaDI+DQoNCjxpbnB1dCB0eXBlPSJmaWxlIiBpZD0iZmlsZXMiIG5hbWU9ImZpbGVzW10iIG11bHRpcGxlIC8+DQoNCjxwcmUgaWQ9ImZpbGVEaXNwbGF5QXJlYSI+UGxlYXNlIHNlbGVjdCBmaWxlKHMpIGFib3ZlLjwvcHJlPg0KDQo8IS0tRGl2IHRoYXQgd2lsbCBob2xkIHRoZSBjaGFydC0tPg0KPGRpdiBpZD0iY2hhcnRfZGl2Ij5Ob25lIExvYWRlZDwvZGl2Pg0KDQpMYXRlbmN5IHRpbWUgdW5pdHM6DQo8c2VsZWN0IG5hbWU9InVuaXRzIiBzaXplPSIxIiBpZD0idGltZVVuaXRTZWxlY3Rpb24iIG9uQ2hhbmdlPSJ0aW1lVW5pdHNTZWxlY3RlZCgpIj4NCiAgICA8b3B0aW9uIHZhbHVlPSJMYXRlbmN5IChzZWNvbmRzKSI+c2Vjb25kczwvb3B0aW9uPg0KICAgIDxvcHRpb24gc2VsZWN0ZWQgdmFsdWU9IkxhdGVuY3kgKG1pbGxpc2Vjb25kcykiPm1pbGxpc2Vjb25kczwvb3B0aW9uPg0KICAgIDxvcHRpb24gdmFsdWU9IkxhdGVuY3kgKHFzKSI+bWljcm9zZWNvbmRzPC9vcHRpb24+DQogICAgPG9wdGlvbiB2YWx1ZT0iTGF0ZW5jeSAobmFub3NlY29uZHMpIj5uYW5vc2Vjb25kczwvb3B0aW9uPg0KPC9zZWxlY3Q+DQo8YnV0dG9uIHR5cGU9J2J1dHRvbicgb25jbGljaz0nZG9FeHBvcnQoZXZlbnQpJz5FeHBvcnQgSW1hZ2U8L2J1dHRvbj4NCg0KJm5ic3A7ICZuYnNwOyAmbmJzcDsgJm5ic3A7DQo8cD4NClBlcmNlbnRpbGUgcmFuZ2U6DQoNCjxpbnB1dCB0eXBlPSJyYW5nZSIgY2xhc3M9InNsaWRlci13aWR0aDUwMCINCiAgICAgICBtaW49IjEiIG1heD0iOCIgdmFsdWU9IjciIHN0ZXA9IjEiDQogICAgICAgd2lkdGg9IjMwMHB4Ig0KICAgICAgIG9uY2hhbmdlPSJzaG93VmFsdWUodGhpcy52YWx1ZSkiIC8+DQo8c3BhbiBpZD0icGVyY2VudGlsZVJhbmdlIj45OS45OTk5OSU8L3NwYW4+DQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgZnVuY3Rpb24gc2hvd1ZhbHVlKG5ld1ZhbHVlKSB7DQogICAgICAgIHZhciB4ID0gTWF0aC5wb3coMTAsIG5ld1ZhbHVlKTsNCiAgICAgICAgdmFyIHBlcmNlbnRpbGUgPSAxMDAuMCAtICgxMDAuMCAvIHgpOw0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGVyY2VudGlsZVJhbmdlIikuaW5uZXJIVE1MPXBlcmNlbnRpbGUgKyAiJSI7DQogICAgICAgIG1heFBlcmNlbnRpbGUgPSB4Ow0KICAgICAgICBkcmF3Q2hhcnQoKTsNCiAgICAgICAgcmV0dXJuIHt0eXBlZDogJyd9Ow0KICAgIH0NCjwvc2NyaXB0Pg0KPC9wPg0KPHA+DQogICAgPGJyPg0KKioqIE5vdGU6IElucHV0IGZpbGVzIGFyZSBleHBlY3RlZCB0byBiZSBpbiB0aGUgLmhncm0gZm9ybWF0IHByb2R1Y2VkIGJ5DQpIaXN0b2dyYW1Mb2dQcm9jZXNzb3IsIG9yIHRoZSBwZXJjZW50aWxlIG91dHB1dCBmb3JtYXQgZm9yIEhkckhpc3RvZ3JhbS4NClNlZSBleGFtcGxlIGZpbGUgZm9ybWF0DQogICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0hkckhpc3RvZ3JhbS9IZHJIaXN0b2dyYW0vYmxvYi9tYXN0ZXIvR29vZ2xlQ2hhcnRzRXhhbXBsZS9leGFtcGxlMS50eHQiPmhlcmU8L2E+DQo8L3A+DQo8IS0tPGg0PkV4cGVjdGVkIFNlcnZpY2UgTGV2ZWw6PC9oND4tLT4NCjwhLS08aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9IkVTTCIgdmFsdWU9IkVTTCI+UGxvdCBFeHBlY3RlZCBTZXJ2aWNlIExldmVsPGJyPi0tPg0KPCEtLVBlcmNlbnRpbGU6LS0+DQo8IS0tPGlucHV0IHR5cGU9InRleHQiIGlkPSJFU0xQZXJjZW50aWxlMCIgbmFtZT0iRVNMUGVyY2VudGlsZTAiIHNpemU9IjYiIHZhbHVlID0gOTAgLz4tLT4NCjwhLS0lICZuYnNwICZuYnNwICZuYnNwIExpbWl0Oi0tPg0KPCEtLTxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iRVNMTGltaXQwIiBuYW1lPSJFU0xMaW1pdDAiIHNpemU9IjEyIi8+LS0+DQo8IS0tPGJyPi0tPg0KPCEtLVBlcmNlbnRpbGU6LS0+DQo8IS0tPGlucHV0IHR5cGU9InRleHQiIGlkPSJFU0xQZXJjZW50aWxlMSIgbmFtZT0iRVNMUGVyY2VudGlsZTEiIHNpemU9IjYiIHZhbHVlID0gOTkgLz4tLT4NCjwhLS0lICZuYnNwICZuYnNwICZuYnNwIExpbWl0Oi0tPg0KPCEtLTxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iRVNMTGltaXQxIiBuYW1lPSJFU0xMaW1pdDEiIHNpemU9IjEyIi8+LS0+DQo8IS0tPGJyPi0tPg0KPCEtLVBlcmNlbnRpbGU6LS0+DQo8IS0tPGlucHV0IHR5cGU9InRleHQiIGlkPSJFU0xQZXJjZW50aWxlMiIgbmFtZT0iRVNMUGVyY2VudGlsZTIiIHNpemU9IjYiIHZhbHVlID0gOTkuOTkgLz4tLT4NCjwhLS0lICZuYnNwICZuYnNwICZuYnNwIExpbWl0Oi0tPg0KPCEtLTxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iRVNMTGltaXQyIiBuYW1lPSJFU0xMaW1pdDIiIHNpemU9IjEyIi8+LS0+DQo8IS0tPGJyPi0tPg0KPCEtLVBlcmNlbnRpbGU6LS0+DQo8IS0tPGlucHV0IHR5cGU9InRleHQiIGlkPSJFU0xQZXJjZW50aWxlMyIgbmFtZT0iRVNMUGVyY2VudGlsZTIiIHNpemU9IjYiIHZhbHVlPSIxMDAuMCIgcmVhZG9ubHkvPi0tPg0KPCEtLSUgJm5ic3AgJm5ic3AgJm5ic3AgTGltaXQ6LS0+DQo8IS0tPGlucHV0IHR5cGU9InRleHQiIGlkPSJFU0xMaW1pdDMiIG5hbWU9IkVTTExpbWl0MiIgc2l6ZT0iMTIiLz4tLT4NCg0KJycnDQoNCnN1bW1hcnlfaHRtbF8zID0gJycnPC9ib2R5Pg0KPC9odG1sPg0KJycnDQoNCiMgPGgyPjxhIGhyZWY9Imh0dHBzOi8vd2ZvdWNoZS5naXRodWIuaW8vVHVsaXAtZG9jcyI+X19ERVNDMV9fPC9hPiAvIF9fREVTQzJfXzwvaDI+DQojIDxoMj5fX0RFU0MxX18gLyBfX0RFU0MyX188L2gyPg0KDQpoZWFkZXIgPSAnJyc8IURPQ1RZUEUgaHRtbD4NCjxodG1sPg0KDQo8c3R5bGU+DQp0YWJsZSwgdGgsIHRkIHsNCiAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsgZm9udC1zaXplOjE2cHg7IHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCnRoOm50aC1jaGlsZChuKzE0KSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0U1RTRFMjsNCn0NCnRkOm50aC1jaGlsZChuKzE0KSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0U1RTRFMjsNCn0NCjwvc3R5bGU+DQoNCjxib2R5Pg0KDQo8aDI+PGEgaHJlZj0iaHR0cHM6Ly93Zm91Y2hlLmdpdGh1Yi5pby9UdWxpcC1kb2NzIj5fX0RFU0MxX188L2E+IC8gX19ERVNDMl9fPC9oMj4NCg0KPHRhYmxlIHN0eWxlPSJ3aWR0aDoxMDAlIj4NCiAgPHRyPg0KICAgIDx0aD5CZW5jaG1hcms8L3RoPg0KICAgIDx0aD5SdW4gSWQ8L3RoPg0KICAgIDx0aD4jTjwvdGg+DQogICAgPHRoPiNGPC90aD4NCiAgICA8dGg+RHVyYXRpb248L3RoPg0KICAgIDx0aD5BcHM8L3RoPg0KICAgIDx0aD5BdmdfUnQ8L3RoPg0KICAgIDx0aD5TdGRldjwvdGg+DQogICAgPHRoPk1pbl9SdDwvdGg+DQogICAgPHRoPjkwcF9SdDwvdGg+DQogICAgPHRoPjk5cF9SdDwvdGg+DQogICAgPHRoPk1heF9SdDwvdGg+DQogICAgPHRoPk1heF9SdHQ8L3RoPg0KICAgIDx0aD5BUVM8L3RoPg0KICAgIDx0aD5NUVM8L3RoPg0KICAgIDx0aD5BV1Q8L3RoPg0KICAgIDx0aD5NV1Q8L3RoPg0KICAgIDx0aD5DUFVfVDwvdGg+DQogICAgPHRoPkNQVTwvdGg+DQogICAgPHRoPk1FTTwvdGg+DQogIDwvdHI+DQonJycNCg0KYmVuY2htYXJrX2NvbHVtbnMgPSAnJycNCiAgPHRyPg0KICAgIDx0aD5CZW5jaG1hcms8L3RoPg0KICAgIDx0aD5SdW4gSWQ8L3RoPg0KICAgIDx0aD4jTjwvdGg+DQogICAgPHRoPiNGPC90aD4NCiAgICA8dGg+RHVyYXRpb248L3RoPg0KICAgIDx0aD5BcHM8L3RoPg0KICAgIDx0aD5BdmdfUnQ8L3RoPg0KICAgIDx0aD5TdGRldjwvdGg+DQogICAgPHRoPk1pbl9SdDwvdGg+DQogICAgPHRoPjkwcF9SdDwvdGg+DQogICAgPHRoPjk5cF9SdDwvdGg+DQogICAgPHRoPk1heF9SdDwvdGg+DQogICAgPHRoPk1heF9SdHQ8L3RoPg0KICAgIDx0aD5BUVM8L3RoPg0KICAgIDx0aD5NUVM8L3RoPg0KICAgIDx0aD5BV1Q8L3RoPg0KICAgIDx0aD5NV1Q8L3RoPg0KICAgIDx0aD5DUFVfVDwvdGg+DQogICAgPHRoPkNQVTwvdGg+DQogICAgPHRoPk1FTTwvdGg+DQogIDwvdHI+DQonJycNCg0KYmVuY2htYXJrX2hlYWRlciA9ICcnJw0KICA8dHI+DQogICAgPHRkPiVzPC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgICA8dGQ+PC90ZD4NCiAgPC90cj4NCicnJw0KDQpiZW5jaG1hcmtfZW1wdHlfcm93ID0gJycnDQogIDx0cj4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgICA8dGQ+Jm5ic3A7PC90ZD4NCiAgPC90cj4NCicnJw0KDQpiZW5jaG1hcmtfZGV0YWlsX3JvdyA9ICcnJw0KICA8dHI+DQogICAgPHRkPiVzPC90ZD4NCiAgICA8dGQ+JWQ8L3RkPg0KICAgIDx0ZD4lZDwvdGQ+DQogICAgPHRkPiVkPC90ZD4NCiAgICA8dGQ+JXM8L3RkPg0KICAgIDx0ZD4lLjNmPC90ZD4NCiAgICA8dGQ+JS4zZiBtczwvdGQ+DQogICAgPHRkPiUuMWYgbXM8L3RkPg0KICAgIDx0ZD4lLjFmIG1zPC90ZD4NCiAgICA8dGQ+JS4xZiBtczwvdGQ+DQogICAgPHRkPiUuMWYgbXM8L3RkPg0KICAgIDx0ZD4lLjFmIG1zPC90ZD4NCiAgICA8dGQ+JXM8L3RkPg0KICAgIDx0ZD4lLjFmPC90ZD4NCiAgICA8dGQ+JWQ8L3RkPg0KICAgIDx0ZD4lLjFmPC90ZD4NCiAgICA8dGQ+JS4xZjwvdGQ+DQogICAgPHRkPiVzPC90ZD4NCiAgICA8dGQ+JS4xZjwvdGQ+DQogICAgPHRkPiUuMWY8L3RkPg0KICA8L3RyPg0KJycnDQoNCmJlbmNobWFya19zdW1tYXJ5X3JvdyA9ICcnJw0KICA8dHI+DQogICAgPHRkPiVzPC90ZD4NCiAgICA8dGQ+JXM8L3RkPg0KICAgIDx0ZD48Yj4lZDwvYj48L3RkPg0KICAgIDx0ZD48Yj48dGFnMT4lZDwvdGFnMT48L2I+PC90ZD4NCiAgICA8dGQ+PGI+JXM8L2I+PC90ZD4NCiAgICA8dGQ+PGI+PHRhZzI+JS4zZjwvdGFnMj48L2I+PC90ZD4NCiAgICA8dGQ+PGI+JS4zZiBtczwvYj48L3RkPg0KICAgIDx0ZD48Yj4lLjFmIG1zPC9iPjwvdGQ+DQogICAgPHRkPjxiPiUuMWYgbXM8L2I+PC90ZD4NCiAgICA8dGQ+PGI+JS4xZiBtczwvYj48L3RkPg0KICAgIDx0ZD48Yj4lLjFmIG1zPC9iPjwvdGQ+DQogICAgPHRkPjxiPiUuMWYgbXM8L2I+PC90ZD4NCiAgICA8dGQ+PGI+JXM8L2I+PC90ZD4NCiAgICA8dGQ+PGI+JS4xZjwvYj48L3RkPg0KICAgIDx0ZD48Yj4lZDwvYj48L3RkPg0KICAgIDx0ZD48Yj4lLjFmPC9iPjwvdGQ+DQogICAgPHRkPjxiPiUuMWY8L2I+PC90ZD4NCiAgICA8dGQ+PGI+JXM8L2I+PC90ZD4NCiAgICA8dGQ+PGI+JS4xZjwvYj48L3RkPg0KICAgIDx0ZD48Yj4lLjFmPC9iPjwvdGQ+DQogIDwvdHI+DQonJycNCg0KdHJhaWxlciA9ICcnJw0KPC90YWJsZT4NCjwvYm9keT4NCjwvaHRtbD4NCicnJw0KDQpjaGFydHNfaHRtbCA9ICcnJw0KPGgyPkFjdGlvbnMgcGVyIFNlY29uZDwvaDI+DQogIDxkaXYgaWQ9Im1haW4iIHN0eWxlPSJ3aWR0aDogMTAwJTtoZWlnaHQ6NDAwcHg7Ij48L2Rpdj4NCiAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2VjaGFydHMvNS42LjAvZWNoYXJ0cy5taW4uanMiPjwvc2NyaXB0Pg0KICA8c2NyaXB0IHNyYz0iX19KU19UX0NIQVJUX18iPjwvc2NyaXB0Pg0KPGgyPlJlc3BvbnNlIFRpbWVzIChtcyk8L2gyPg0KICA8ZGl2IGlkPSJtYWluX3AiIHN0eWxlPSJ3aWR0aDogMTAwJTtoZWlnaHQ6NDAwcHg7Ij48L2Rpdj4NCiAgPHNjcmlwdCBzcmM9Il9fSlNfUF9DSEFSVF9fIj48L3NjcmlwdD4NCicnJw0KDQpjaGFydF90X2h0bWwgPSAnJycNCnZhciBteUNoYXJ0MSA9IGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbicpKTsNCg0KdmFyIGRhdGEgPSAgX19EQVRBX187DQoNCnZhciBvcHRpb24gPSB7DQogIGxlZ2VuZDoge30sDQogIHRvb2x0aXA6IHsNCiAgICB0cmlnZ2VyOiAnYXhpcycsDQogIH0sDQogIGRhdGFzZXQ6IHsNCiAgICBzb3VyY2U6ZGF0YSwNCiAgICBkaW1lbnNpb25zOiBbJ3RpbWVzdGFtcCcsICdzZW5zb3IxJywgJ3NlbnNvcjInXSwNCiAgfSwNCiAgeEF4aXM6IHsgdHlwZTogJ3RpbWUnIH0sDQogIHlBeGlzOiB7IH0sDQogIHNlcmllczogWw0KICB7DQogICAgIG5hbWU6ICdBY3Rpb25zL3MnLA0KICAgICB0eXBlOiAnbGluZScsDQogICAgIHNtb290aDogdHJ1ZSwNCiAgICAgZW5jb2RlOiB7DQogICAgICAgeDogJ3RpbWVzdGFtcCcsDQogICAgICAgeTogJ3NlbnNvcjEnIC8vIHJlZmVyIHNlbnNvciAxIHZhbHVlIA0KICAgICB9DQogIH0sew0KICAgICBuYW1lOiAnRmFpbHVyZXMvcycsDQogICAgIHR5cGU6ICdsaW5lJywNCiAgICAgc21vb3RoOiB0cnVlLA0KICAgICBlbmNvZGU6IHsNCiAgICAgICB4OiAndGltZXN0YW1wJywNCiAgICAgICB5OiAnc2Vuc29yMicNCiAgfQ0KfV0NCn07DQpteUNoYXJ0MS5zZXRPcHRpb24ob3B0aW9uKTsNCicnJw0KDQpjaGFydF9wX2h0bWwgPSAnJycNCnZhciBteUNoYXJ0MiA9IGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbl9wJykpOw0KDQp2YXIgZGF0YSA9ICBfX0RBVEFfXzsNCg0KdmFyIG9wdGlvbiA9IHsNCiAgbGVnZW5kOiB7fSwNCiAgdG9vbHRpcDogew0KICAgIHRyaWdnZXI6ICdheGlzJywNCiAgfSwNCiAgZGF0YXNldDogew0KICAgIHNvdXJjZTpkYXRhLA0KICAgIGRpbWVuc2lvbnM6IFsndGltZXN0YW1wJywgJ3NlbnNvcjEnLCAnc2Vuc29yMicsICdzZW5zb3IzJywgJ3NlbnNvcjQnLCAnc2Vuc29yNScsICdzZW5zb3I2J10sDQogIH0sDQogIHhBeGlzOiB7IHR5cGU6ICd0aW1lJyB9LA0KICB5QXhpczogeyB9LA0KICBzZXJpZXM6IFsNCiAgew0KICAgICBuYW1lOiAnTWF4JywNCiAgICAgdHlwZTogJ2xpbmUnLA0KICAgICBzbW9vdGg6IHRydWUsDQogICAgIGVuY29kZTogew0KICAgICAgIHg6ICd0aW1lc3RhbXAnLA0KICAgICAgIHk6ICdzZW5zb3I2JyAvLyByZWZlciBzZW5zb3IgMSB2YWx1ZQ0KICAgICB9DQogIH0sew0KICAgICBuYW1lOiAncDk5JywNCiAgICAgdHlwZTogJ2xpbmUnLA0KICAgICBzbW9vdGg6IHRydWUsDQogICAgIGVuY29kZTogew0KICAgICAgIHg6ICd0aW1lc3RhbXAnLA0KICAgICAgIHk6ICdzZW5zb3I1JyAvLyByZWZlciBzZW5zb3IgMSB2YWx1ZQ0KICAgICB9DQogIH0sew0KICAgICBuYW1lOiAncDk1JywNCiAgICAgdHlwZTogJ2xpbmUnLA0KICAgICBzbW9vdGg6IHRydWUsDQogICAgIGVuY29kZTogew0KICAgICAgIHg6ICd0aW1lc3RhbXAnLA0KICAgICAgIHk6ICdzZW5zb3I0JyAvLyByZWZlciBzZW5zb3IgMSB2YWx1ZQ0KICAgICB9DQoNCiAgfSx7DQogICAgIG5hbWU6ICdwOTAnLA0KICAgICB0eXBlOiAnbGluZScsDQogICAgIHNtb290aDogdHJ1ZSwNCiAgICAgZW5jb2RlOiB7DQogICAgICAgeDogJ3RpbWVzdGFtcCcsDQogICAgICAgeTogJ3NlbnNvcjMnIC8vIHJlZmVyIHNlbnNvciAxIHZhbHVlDQogICAgIH0NCg0KICB9LHsNCiAgICAgbmFtZTogJ0F2ZycsDQogICAgIHR5cGU6ICdsaW5lJywNCiAgICAgc21vb3RoOiB0cnVlLA0KICAgICBlbmNvZGU6IHsNCiAgICAgICB4OiAndGltZXN0YW1wJywNCiAgICAgICB5OiAnc2Vuc29yMicNCiAgICAgfQ0KICB9LHsNCiAgICAgbmFtZTogJ01pbicsDQogICAgIHR5cGU6ICdsaW5lJywNCiAgICAgc21vb3RoOiB0cnVlLA0KICAgICBlbmNvZGU6IHsNCiAgICAgICB4OiAndGltZXN0YW1wJywNCiAgICAgICB5OiAnc2Vuc29yMScNCiAgfQ0KfV0NCn07DQpteUNoYXJ0Mi5zZXRPcHRpb24ob3B0aW9uKTsNCg0Kd2luZG93Lm9ucmVzaXplID0gZnVuY3Rpb24oKSB7DQogIG15Q2hhcnQxLnJlc2l6ZSgpOw0KICBteUNoYXJ0Mi5yZXNpemUoKTsNCn07DQonJycNCg0KY2xhc3MgU3VtbWFyeToNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgIHNlbGYubnVtX2FjdGlvbnMgPSAwDQogICAgICAgIHNlbGYubnVtX2ZhaWxlZCA9IDANCiAgICAgICAgc2VsZi5kdXJhdGlvbiA9IDAuMA0KICAgICAgICBzZWxmLm1pbl9ydCA9IDEwMDAwMDAwMDAuMA0KICAgICAgICBzZWxmLm1heF9ydCA9IDAuMA0KICAgICAgICBzZWxmLm1heF9ydF90cyA9ICIiDQogICAgICAgIHNlbGYubWVtID0gMC4wDQogICAgICAgIHNlbGYuY3B1ID0gMC4wDQogICAgICAgIHNlbGYubWF4X2F3dCA9IDAuMA0KICAgICAgICBzZWxmLm1heF93dCA9IDAuMA0KICAgICAgICBzZWxmLmF2Z19xcyA9IDAuMA0KICAgICAgICBzZWxmLm1heF9xcyA9IDANCiAgICAgICAgc2VsZi5uYW1lID0gIiINCiAgICAgICAgc2VsZi5jcHVfdGltZV9ucyA9IDANCiAgICAgICAgc2VsZi5jaGFydF90X2xpc3QgPSBbXSAgICMgWycyMDE4LTA0LTEwVDIwOjQwOjMzLjEwMCcsIDExMDAsIDBdDQogICAgICAgIHNlbGYuY2hhcnRfcF9saXN0ID0gW10gICAjIFsnMjAxOC0wNC0xMFQyMDo0MDozM1onLCAxLCA1LCAxMCwgMjAsIDI1LCAzMF0NCg0KZGVmIGNyZWF0ZVJlcG9ydChmaWxlbmFtZSwgdGV4dCk6DQoNCiAgICBjd2QgPSBvcy5nZXRjd2QoKQ0KICAgIGlmIG9zLnBhdGguaXNkaXIoImJ1aWxkL3JlcG9ydHMvdHVsaXAiKToNCiAgICAgICAgb3MuY2hkaXIoImJ1aWxkL3JlcG9ydHMvdHVsaXAiKQ0KDQogICAgcHJpbnQoIlxuT3V0cHV0IGZpbGVuYW1lID0gIiArIGZpbGVuYW1lKQ0KDQogICAgaWYgdGV4dFswXSA9PSAneyc6DQogICAgICAgIGNvbmZpZ19maWxlbmFtZSA9ICIiDQogICAgZWxzZToNCiAgICAgICAgY29uZmlnX2ZpbGVuYW1lID0gdGV4dA0KDQogICAgamhoID0ge30NCiAgICBqc3MgPSB7fQ0KDQogICAgcHJpbnRfZGV0YWlsX3Jvd3MgPSBUcnVlDQoNCiAgICBnbG9iYWwgbmFtZTJzDQogICAgZ2xvYmFsIG5hbWUyc19saXN0DQogICAgZ2xvYmFsIGJlbmNobWFya19pZA0KICAgIG5hbWUycyA9ICIiDQogICAgbmFtZTJzX2xpc3QgPSBbXQ0KICAgIGJlbmNobWFya19pZCA9IDANCg0KICAgIHNtID0gTm9uZQ0KICAgIGpoID0gSGlzdG9ncmFtKDEsIDM2MDAqMTAwMCoxMDAwLCAzKQ0KICAgIGZpbGVPYmogPSBvcGVuKGZpbGVuYW1lKQ0KICAgIGpiID0ganNvbi5sb2FkKGZpbGVPYmosIG9iamVjdF9wYWlyc19ob29rPU9yZGVyZWREaWN0KQ0KICAgIHZlcnNpb24gPSBqYlsndmVyc2lvbiddDQogICAgZGVzYzEgPSAnVHVsaXAgJyArIHZlcnNpb24NCiAgICByYiA9IGpiWyJyZXN1bHRzIl0NCg0KICAgIHJlcG9ydF9mbiA9IGpiWyJjb25maWciXVsiYWN0aW9ucyJdWyJyZXBvcnRfZmlsZW5hbWUiXQ0KICAgIHJlcG9ydF9maCA9IG9wZW4ocmVwb3J0X2ZuLCAidysiKQ0KDQogICAgZ2xvYmFsIHJlcG9ydF9kbg0KICAgIHJlcG9ydF9kbiA9IG9zLnBhdGguc3BsaXRleHQocmVwb3J0X2ZuKVswXQ0KICAgIHRyeToNCiAgICAgICAgb3MubWFrZWRpcnMocmVwb3J0X2RuKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcGFzcw0KDQogICAgZGVmIG9kaXIoZmlsZW5hbWUpOg0KICAgICAgICBnbG9iYWwgcmVwb3J0X2RuDQogICAgICAgIHJldHVybiBvcy5wYXRoLmpvaW4ob3MuZ2V0Y3dkKCksIHJlcG9ydF9kbiwgZmlsZW5hbWUpDQoNCiAgICBkZWYgb2Rpckh0bWwoZmlsZW5hbWUpOg0KICAgICAgICBnbG9iYWwgcmVwb3J0X2RuDQogICAgICAgIHJldHVybiByZXBvcnRfZG4gKyAiLyIgKyBmaWxlbmFtZQ0KDQogICAgaWYgbGVuKGNvbmZpZ19maWxlbmFtZSkgPiAwOg0KICAgICAgICBkZXNjMiA9ICI8YSBocmVmPSclcyc+IiUob3MucGF0aC5zcGxpdGV4dChjb25maWdfZmlsZW5hbWUpWzBdICsgIi5odG1sIikNCiAgICBlbHNlOg0KICAgICAgICBkZXNjMiA9ICIiDQoNCiAgICBpZiBsZW4oY29uZmlnX2ZpbGVuYW1lKSA+IDA6DQogICAgICAgIGRlc2MyICs9IGpiWyJjb25maWciXVsiYWN0aW9ucyJdWyJkZXNjcmlwdGlvbiJdICsgIjwvYT4gLyAiICsgamJbInRpbWVzdGFtcCJdWzotM10NCiAgICBlbHNlOg0KICAgICAgICBkZXNjMiArPSBqYlsiY29uZmlnIl1bImFjdGlvbnMiXVsiZGVzY3JpcHRpb24iXSArICIgLyAiICsgamJbInRpbWVzdGFtcCJdWzotM10NCg0KICAgIHByaW50KCJSZXBvcnQgZmlsZW5hbWUgPSAiICsgcmVwb3J0X2ZuKQ0KDQogICAgZGVmIHByaW50ZihzKToNCiAgICAgICAgcmVwb3J0X2ZoLndyaXRlKHMpDQoNCiAgICBkZWYgYWN0aW9uTmFtZShzKToNCiAgICAgICAgcmV0dXJuIHMuc3BsaXQoIiwiKVswXS5zdHJpcCgpDQoNCiAgICBkZWYgYWN0aW9uRGVzYyhzKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmV0dXJuIHMuc3BsaXQoIiwiKVsxXS5zdHJpcCgpDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHJldHVybiAiIg0KDQogICAgZGVmIHN0cl9mcm9tX2NwdV90aW1lX25zKHZfbnMpOg0KICAgICAgICByID0gc3RyKGRhdGV0aW1lLnRpbWVkZWx0YShzZWNvbmRzPXZfbnMvMTAwMDAwMDAwMC4wKSkgICNbOi01XQ0KICAgICAgICBpZiAnLicgaW4gcjoNCiAgICAgICAgICAgIHIgPSByWzotNV0NCiAgICAgICAgcmV0dXJuIHINCg0KICAgIGRlZiBwcmludF9nbG9iYWxfc3VtbWFyeSgpOg0KICAgICAgICBnbG9iYWwgbmFtZTJzDQogICAgICAgIGdsb2JhbCBuYW1lMnNfbGlzdA0KICAgICAgICBnbG9iYWwgYmVuY2htYXJrX2lkDQoNCiAgICAgICAgYXZnX2FwcyA9IDAuMCBpZiBzbS5uYW1lIGluIFsib25TdGFydCIsICJvblN0b3AiXSBlbHNlIHNtLm51bV9hY3Rpb25zL3NtLmR1cmF0aW9uDQogICAgICAgIGlmIHNtLm5hbWUgaW4gWyJvblN0YXJ0IiwgIm9uU3RvcCJdOg0KICAgICAgICAgICAgY3B1X3QgPSAiMDowMDowMCINCiAgICAgICAgICAgIHNtLmNwdSA9IDAuMA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY3B1X3QgPSBzdHJfZnJvbV9jcHVfdGltZV9ucyhzbS5jcHVfdGltZV9ucykNCg0KICAgICAgICBzdGF0c0ZpbGVuYW1lID0gJyVzXyVkLmh0bWwnJShvZGlyKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdKSxiZW5jaG1hcmtfaWQpDQogICAgICAgIHN0YXRzRmlsZW5hbWVIdG1sID0gJyVzXyVkLmh0bWwnJShvZGlySHRtbChyZXBvcnRfZm4uc3BsaXQoJy4nKVswXSksYmVuY2htYXJrX2lkKQ0KICAgICAgICB0ZXh0ID0gIjxhIGhyZWY9JyVzJz4lczwvYT4iJShzdGF0c0ZpbGVuYW1lSHRtbCwiW1N1bW1hcnldIikNCiAgICAgICAgcHJpbnRTdHJlYW0gPSBQcmludFN0cmVhbShzdGF0c0ZpbGVuYW1lKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludChzdW1tYXJ5X2h0bWxfMSkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpDQogICAgICAgIHByaW50U3RyZWFtLnByaW50KCcgICAgZnVuY3Rpb24gZHJhd0luaXRpYWxDaGFydCgpIHsnKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICAgICAgLy8gQ29ubmVjdCB0aGUgY2hvb3NlIGZpbGVzIGJ1dHRvbjonKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoIiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVzJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlRmlsZVNlbGVjdCwgZmFsc2UpOyIpDQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICAgICAgLy8gTG9hZCBzb21lIHN0YXRpYyBleGFtcGxlIGRhdGE6JykNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpDQogICAgICAgIGlkeCA9IDANCiAgICAgICAgYWN0aW9uc1N0cmluZyA9ICIiDQogICAgICAgIGhpc3Rvc1N0cmluZyA9ICIiDQogICAgICAgIGZvciBrZXkgaW4ganNzLmtleXMoKToNCiAgICAgICAgICAgIGlkeCArPSAxDQogICAgICAgICAgICBzbXggPSBqc3Nba2V5XQ0KICAgICAgICAgICAgamh4ID0gamhoW2tleV0NCiAgICAgICAgICAgIGlmIGxlbihhY3Rpb25zU3RyaW5nKSA+IDA6DQogICAgICAgICAgICAgICAgYWN0aW9uc1N0cmluZyArPSAnLCAnDQogICAgICAgICAgICAgICAgaGlzdG9zU3RyaW5nICs9ICcsICcNCiAgICAgICAgICAgIGFjdGlvbnNTdHJpbmcgKz0gIidBJXMnIiUoa2V5KQ0KICAgICAgICAgICAgaGlzdG9zU3RyaW5nICs9ICJkYXRhJWRTdHIiJShpZHgpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludCgnICAgIHZhciBkYXRhJWRTdHIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJkaXYjZGF0YV8lZCIpLmlubmVySFRNTC50cmltKCk7JyUoaWR4LGlkeCkpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgaWYgaWR4ID4gMToNCiAgICAgICAgICAgIGFjdGlvbnNTdHJpbmcgKz0gJywgJyArICInUyciDQogICAgICAgICAgICBoaXN0b3NTdHJpbmcgKz0gJywgJyArICJkYXRhJWRTdHIiJSgwKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICB2YXIgZGF0YSVkU3RyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiZGl2I2RhdGFfJWQiKS5pbm5lckhUTUwudHJpbSgpOyclKDAsMCkpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICB2YXIgaGlzdG9zID0gWyVzXTsnJShoaXN0b3NTdHJpbmcpKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICB2YXIgbmFtZXMgPSBbJXNdOyclKGFjdGlvbnNTdHJpbmcpKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCg0KICAgICAgICBwcmludFN0cmVhbS5wcmludCgnICAgIHNldENoYXJ0RGF0YShuYW1lcywgaGlzdG9zKTsnKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICBkcmF3Q2hhcnQoKTsnKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJyAgICB9JykNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpDQogICAgICAgIHRDaGFydEZpbGVuYW1lID0gJyVzXyVkX3QuanMnJShvZGlyKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdKSxiZW5jaG1hcmtfaWQpDQogICAgICAgIHRDaGFydEZpbGVuYW1lSHRtbCA9ICclc18lZF90LmpzJyUob2Rpckh0bWwocmVwb3J0X2ZuLnNwbGl0KCcuJylbMF0pLGJlbmNobWFya19pZCkNCiAgICAgICAgcENoYXJ0RmlsZW5hbWUgPSAnJXNfJWRfcC5qcyclKG9kaXIocmVwb3J0X2ZuLnNwbGl0KCcuJylbMF0pLGJlbmNobWFya19pZCkNCiAgICAgICAgcENoYXJ0RmlsZW5hbWVIdG1sID0gJyVzXyVkX3AuanMnJShvZGlySHRtbChyZXBvcnRfZm4uc3BsaXQoJy4nKVswXSksYmVuY2htYXJrX2lkKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludCgNCiAgICAgICAgICAgIHN1bW1hcnlfaHRtbF8yDQogICAgICAgICAgICAgICAgLnJlcGxhY2UoIl9fQ0hBUlRTX1RFWFRfXyIsDQogICAgICAgICAgICAgICAgICAgIGNoYXJ0c19odG1sDQogICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIl9fSlNfVF9DSEFSVF9fIixvcy5wYXRoLmJhc2VuYW1lKHRDaGFydEZpbGVuYW1lSHRtbCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIl9fSlNfUF9DSEFSVF9fIixvcy5wYXRoLmJhc2VuYW1lKHBDaGFydEZpbGVuYW1lSHRtbCkpKQ0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpDQoNCiAgICAgICAgaWR4ID0gMA0KICAgICAgICBmb3Iga2V5IGluIGpzcy5rZXlzKCk6DQogICAgICAgICAgICBpZHggKz0gMQ0KICAgICAgICAgICAgc214ID0ganNzW2tleV0NCiAgICAgICAgICAgIGpoeCA9IGpoaFtrZXldDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludCgnPGRpdiBpZD0iZGF0YV8lZCIgY2xhc3M9Imhpc3RvIj4nJShpZHgpKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpDQogICAgICAgICAgICBqaHgub3V0cHV0UGVyY2VudGlsZURpc3RyaWJ1dGlvbihwcmludFN0cmVhbSwgMTAwMC4wKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnQoJzwvZGl2PicpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCg0KICAgICAgICBwcmludFN0cmVhbS5wcmludCgnPGRpdiBpZD0iZGF0YV8wIiBjbGFzcz0iaGlzdG8iPicpDQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQ0KICAgICAgICBqaC5vdXRwdXRQZXJjZW50aWxlRGlzdHJpYnV0aW9uKHByaW50U3RyZWFtLCAxMDAwLjApDQogICAgICAgIHByaW50U3RyZWFtLnByaW50KCc8L2Rpdj4nKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCkNCg0KICAgICAgICBwcmludFN0cmVhbS5wcmludChzdW1tYXJ5X2h0bWxfMykNCiAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigpDQogICAgICAgIHByaW50U3RyZWFtLmZsdXNoKCkNCiAgICAgICAgcHJpbnRTdHJlYW0uY2xvc2UoKQ0KDQogICAgICAgICMgQWN0aW9ucy9zIGNoYXJ0DQogICAgICAgICNjaGFydF90X2xpc3QgPSBbDQogICAgICAgICMgICAgWycyMDE4LTA0LTEwVDIwOjQwOjMzLjEwMCcsIDExMDAsIDBdLA0KICAgICAgICAjICAgIFsnMjAxOC0wNC0xMFQyMDo0MDo1My4yMDAnLCAxMDAyLCAwXSwNCiAgICAgICAgIyAgICBbJzIwMTgtMDQtMTBUMjA6NDE6MDMuMzAwJywgMTEwNCwgMF0sDQogICAgICAgICMgICAgWycyMDE4LTA0LTEwVDIwOjQ0OjAzLjQwMCcsIDEyMDUuNSwgMF0sDQogICAgICAgICMgICAgWycyMDE4LTA0LTEwVDIwOjQ1OjAzLjUwMCcsIDEzMDYsIDBdDQogICAgICAgICNdDQogICAgICAgIGNoYXJ0X3BfbGlzdCA9IFsNCiAgICAgICAgICAgIFsnMjAxOC0wNC0xMFQyMDo0MDozM1onLCAxLCA1LCAxMCwgMjAsIDI1LCAzMCBdLA0KICAgICAgICAgICAgWycyMDE4LTA0LTEwVDIwOjQwOjUzWicsIDIsIDYsIDE1LCAyNSwgMzAsIDM1XSwNCiAgICAgICAgICAgIFsnMjAxOC0wNC0xMFQyMDo0MTowM1onLCAyLCA1LCAyMCwgMzAsIDM1LCA0MF0sDQogICAgICAgICAgICBbJzIwMTgtMDQtMTBUMjA6NDQ6MDNaJywgMywgNywgMTIsIDIyLCAzMCwgMzJdLA0KICAgICAgICAgICAgWycyMDE4LTA0LTEwVDIwOjQ1OjAzWicsIDIsIDEwLCAxMywgMjMsIDMwLCAzM10NCiAgICAgICAgXQ0KICAgICAgICBwcmludFN0cmVhbSA9IFByaW50U3RyZWFtKHRDaGFydEZpbGVuYW1lKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludChjaGFydF90X2h0bWwucmVwbGFjZSgiX19EQVRBX18iLCgiJXMiJShzbS5jaGFydF90X2xpc3QpKS5yZXBsYWNlKCJ1JyIsIiciKSkpDQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQ0KICAgICAgICBwcmludFN0cmVhbS5mbHVzaCgpDQogICAgICAgIHByaW50U3RyZWFtLmNsb3NlKCkNCg0KICAgICAgICAjIFJlc3BvbnNlIFRpbWUgKG1zKSBjaGFydA0KICAgICAgICBwcmludFN0cmVhbSA9IFByaW50U3RyZWFtKHBDaGFydEZpbGVuYW1lKQ0KICAgICAgICBwcmludFN0cmVhbS5wcmludChjaGFydF9wX2h0bWwucmVwbGFjZSgiX19EQVRBX18iLCgiJXMiJShzbS5jaGFydF9wX2xpc3QpKS5yZXBsYWNlKCJ1JyIsIiciKSkpDQogICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oKQ0KICAgICAgICBwcmludFN0cmVhbS5mbHVzaCgpDQogICAgICAgIHByaW50U3RyZWFtLmNsb3NlKCkNCg0KICAgICAgICBodG1sID0gYmVuY2htYXJrX3N1bW1hcnlfcm93JShuYW1lMnMsdGV4dCxzbS5udW1fYWN0aW9ucyxzbS5udW1fZmFpbGVkLHN0cihkYXRldGltZS50aW1lZGVsdGEoc2Vjb25kcz1pbnQoc20uZHVyYXRpb24pKSksYXZnX2FwcyxqaC5nZXRNZWFuKCkvMTAwMC4wLGpoLmdldFN0ZERldmlhdGlvbigpLzEwMDAuMCxzbS5taW5fcnQsamguZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTAuMCkvMTAwMC4wLGpoLmdldFZhbHVlQXRQZXJjZW50aWxlKDk5LjApLzEwMDAuMCxzbS5tYXhfcnQsc20ubWF4X3J0X3RzWzg6XSxzbS5hdmdfcXMsc20ubWF4X3FzLHNtLm1heF9hd3Qsc20ubWF4X3d0LGNwdV90LHNtLmNwdSxzbS5tZW0pDQogICAgICAgIGlmIG5vdCBwcmludF9kZXRhaWxfcm93czoNCiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjxiPiIsIiIpDQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L2I+IiwiIikNCiAgICAgICAgIyBWYWxpZGF0aW9uOiAjRg0KICAgICAgICBpZiBzbS5udW1fZmFpbGVkID4gMDoNCiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjx0YWcxPiIsIjxtYXJrPiIpDQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L3RhZzE+IiwiPC9tYXJrPiIpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8dGFnMT4iLCIiKQ0KICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPC90YWcxPiIsIiIpDQogICAgICAgICMgVmFsaWRhdGlvbjogQXZnX0FQUw0KICAgICAgICAjcHJpbnQoc20ubmFtZSkNCiAgICAgICAgaWYgImFwc19yYXRlIiBpbiBqYlsiY29uZmlnIl1bImJlbmNobWFya3MiXVtzbS5uYW1lXS5rZXlzKCk6DQogICAgICAgICAgICB0YXJnZXRfYXBzID0gamJbImNvbmZpZyJdWyJiZW5jaG1hcmtzIl1bc20ubmFtZV1bImFwc19yYXRlIl0NCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHRhcmdldF9hcHMgPSAwLjANCiAgICAgICAgYXBzX3JhdGVfc3RlcF9jaGFuZ2UgPSAwLjANCiAgICAgICAgaWYgImFwc19yYXRlX3N0ZXBfY2hhbmdlIiBpbiBqYlsiY29uZmlnIl1bImJlbmNobWFya3MiXVtzbS5uYW1lXS5rZXlzKCk6DQogICAgICAgICAgICBhcHNfcmF0ZV9zdGVwX2NoYW5nZSA9IGpiWyJjb25maWciXVsiYmVuY2htYXJrcyJdW3NtLm5hbWVdWyJhcHNfcmF0ZV9zdGVwX2NoYW5nZSJdDQogICAgICAgIGlmIGFwc19yYXRlX3N0ZXBfY2hhbmdlID09IDAuMCBhbmQgdGFyZ2V0X2FwcyA+IDAuMDoNCiAgICAgICAgICAgIGRlbHRhX3BlcmNlbnRhZ2VfYXBzID0gMTAwLjAqYWJzKHRhcmdldF9hcHMtYXZnX2FwcykvdGFyZ2V0X2Fwcw0KICAgICAgICAgICAgaWYgZGVsdGFfcGVyY2VudGFnZV9hcHMgPiAxLjU6DQogICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPHRhZzI+IiwiPG1hcms+IikNCiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L3RhZzI+IiwiPC9tYXJrPiIpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjx0YWcyPiIsIiIpDQogICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPC90YWcyPiIsIiIpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8dGFnMj4iLCIiKQ0KICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPC90YWcyPiIsIiIpDQogICAgICAgIHByaW50ZihodG1sKQ0KICAgICAgICBpZiBsZW4obmFtZTJzX2xpc3QpID4gMDoNCiAgICAgICAgICAgIG5hbWUycyA9IG5hbWUyc19saXN0WzBdDQogICAgICAgICAgICBkZWwgbmFtZTJzX2xpc3RbMF0NCg0KICAgIGRlZiBwcmludF9hY3Rpb25fc3VtbWFyeSgpOg0KICAgICAgICBnbG9iYWwgbmFtZTJzDQogICAgICAgIGdsb2JhbCBuYW1lMnNfbGlzdA0KICAgICAgICBnbG9iYWwgYmVuY2htYXJrX2lkDQogICAgICAgIHBhZ2VfaWQgPSAwDQogICAgICAgIG51bV9rZXlzID0gbGVuKGpzcy5rZXlzKCkpDQogICAgICAgIGZvciBrZXkgaW4ganNzLmtleXMoKToNCiAgICAgICAgICAgIHNteCA9IGpzc1trZXldDQogICAgICAgICAgICBqaHggPSBqaGhba2V5XQ0KICAgICAgICAgICAgaWYgamJbImNvbmZpZyJdWyJhY3Rpb25zIl1bInVzZXJfYWN0aW9ucyJdLmhhc19rZXkoa2V5KToNCiAgICAgICAgICAgICAgICB0ZXh0ID0gIlslcy4lc10iJShrZXksIGFjdGlvbk5hbWUoamJbImNvbmZpZyJdWyJhY3Rpb25zIl1bInVzZXJfYWN0aW9ucyJdW2tleV0pKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICB0ZXh0ID0gIlslc10iJShrZXkpDQogICAgICAgICAgICBzdGF0c0ZpbGVuYW1lID0gJyVzXyVkXyVkLmh0bWwnJShvZGlyKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdKSxiZW5jaG1hcmtfaWQscGFnZV9pZCkNCiAgICAgICAgICAgIHN0YXRzRmlsZW5hbWVIdG1sID0gJyVzXyVkXyVkLmh0bWwnJShvZGlySHRtbChyZXBvcnRfZm4uc3BsaXQoJy4nKVswXSksYmVuY2htYXJrX2lkLHBhZ2VfaWQpDQogICAgICAgICAgICBzdGF0c0ZpbGVuYW1lUHJldiA9ICclc18lZF8lZC5odG1sJyUocmVwb3J0X2ZuLnNwbGl0KCcuJylbMF0sYmVuY2htYXJrX2lkLGFicyhwYWdlX2lkLTEpKQ0KICAgICAgICAgICAgc3RhdHNGaWxlbmFtZU5leHQgPSAnJXNfJWRfJWQuaHRtbCclKHJlcG9ydF9mbi5zcGxpdCgnLicpWzBdLGJlbmNobWFya19pZCxwYWdlX2lkKzEpDQogICAgICAgICAgICB0ZXh0ID0gIjxhIGhyZWY9JyVzJz4lczwvYT4iJShzdGF0c0ZpbGVuYW1lSHRtbCx0ZXh0KQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0gPSBQcmludFN0cmVhbShzdGF0c0ZpbGVuYW1lKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigiPGh0bWw+IikNCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIjxzdHlsZT4iKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigidGFibGUsIHRoLCB0ZCB7IikNCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIiAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsgZm9udC1zaXplOjE2cHg7IHRleHQtYWxpZ246IGNlbnRlcjsiKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigifSIpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCJtYXJrIHsiKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigiICBiYWNrZ3JvdW5kLWNvbG9yOiBMaWdodEdyYXk7IikNCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIiAgY29sb3I6IGJsYWNrOyIpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCJ9IikNCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIjwvc3R5bGU+IikNCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIjxib2R5PiIpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIuLi8lcyI+VXA8L2E+JyUocmVwb3J0X2ZuKSkNCiAgICAgICAgICAgIGlmIChwYWdlX2lkID09IDApIGFuZCAobnVtX2tleXMgPT0gMSk6DQogICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignPGEgaHJlZj0iIyI+UHJldjwvYT4nKQ0KICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJzxhIGhyZWY9IiMiPk5leHQ8L2E+JykNCiAgICAgICAgICAgIGVsaWYgKHBhZ2VfaWQgPT0gMCkgYW5kIChudW1fa2V5cyA+IDEpOg0KICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJzxhIGhyZWY9IiMiPlByZXY8L2E+JykNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIlcyI+TmV4dDwvYT4nJShzdGF0c0ZpbGVuYW1lTmV4dCkpDQogICAgICAgICAgICBlbGlmIHBhZ2VfaWQrMSA9PSBudW1fa2V5czoNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIlcyI+UHJldjwvYT4nJShzdGF0c0ZpbGVuYW1lUHJldikpDQogICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignPGEgaHJlZj0iIyI+TmV4dDwvYT4nKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCc8YSBocmVmPSIlcyI+UHJldjwvYT4nJShzdGF0c0ZpbGVuYW1lUHJldikpDQogICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignPGEgaHJlZj0iJXMiPk5leHQ8L2E+JyUoc3RhdHNGaWxlbmFtZU5leHQpKQ0KDQogICAgICAgICAgICBpZiBqYlsiY29uZmlnIl1bImFjdGlvbnMiXVsidXNlcl9hY3Rpb25zIl0uaGFzX2tleShrZXkpOg0KICAgICAgICAgICAgICAgIGRlc2MgPSAiWyVzLiVzXSIlKGtleSwgYWN0aW9uTmFtZShqYlsiY29uZmlnIl1bImFjdGlvbnMiXVsidXNlcl9hY3Rpb25zIl1ba2V5XSkpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGRlc2MgPSAiW0Elc10iJShrZXkpDQogICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCI8aDI+JXMgUGVyY2VudGlsZSBSZXNwb25zZSBUaW1lIERpc3RyaWJ1dGlvbjwvaDI+IiUoZGVzYykpDQoNCiAgICAgICAgICAgICNwcmludFN0cmVhbS5wcmludGxuKCI8cHJlPiIpDQogICAgICAgICAgICAjamh4Lm91dHB1dFBlcmNlbnRpbGVEaXN0cmlidXRpb24ocHJpbnRTdHJlYW0sIDEwMDAuMCkNCg0KICAgICAgICAgICAgYm9zID0gQnl0ZUFycmF5T3V0cHV0U3RyZWFtKCkNCiAgICAgICAgICAgIG94ID0gUHJpbnRTdHJlYW0oYm9zKQ0KICAgICAgICAgICAgamh4Lm91dHB1dFBlcmNlbnRpbGVEaXN0cmlidXRpb24ob3gsIDEwMDAuMCkNCiAgICAgICAgICAgIG94LmZsdXNoKCkNCiAgICAgICAgICAgIG94LmNsb3NlKCkNCiAgICAgICAgICAgIHB0ZXh0ID0gYm9zLnRvU3RyaW5nKCkNCiAgICAgICAgICAgIGxpbmVzID0gcHRleHQuc3BsaXQoJ1xuJykNCiAgICAgICAgICAgIHRjb3VudCA9IGpoeC5nZXRUb3RhbENvdW50KCkNCiAgICAgICAgICAgIGhlYWRlciA9IFRydWUNCiAgICAgICAgICAgIHJsaXN0ID0gW10NCiAgICAgICAgICAgIGZvciBsaW5lIGluIGxpbmVzOg0KICAgICAgICAgICAgICBpZiBsZW4obGluZSkgPT0gMDoNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICBpZiBsaW5lWzBdICE9ICIjIjoNCiAgICAgICAgICAgICAgICBlID0gbGluZS5zcGxpdCgpDQogICAgICAgICAgICAgICAgaWYgaGVhZGVyOg0KICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignPHRhYmxlIHN0eWxlPSJ3aWR0aDo2MDBweCI+JykNCiAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgPHRyPicpDQogICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRoPiVzPC90aD4nJShlWzBdKSkNCiAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgICA8dGg+JXM8L3RoPiclKGVbMV0pKQ0KICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0aD4lczwvdGg+JyUoZVsyXSkpDQogICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRoPiVzPC90aD4nJShlWzNdKSkNCiAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgICA8dGg+QWJvdmVDb3VudDwvdGg+JykNCiAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgPC90cj4nKQ0KICAgICAgICAgICAgICAgICAgaGVhZGVyID0gRmFsc2UNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgaWYgbGVuKGUpID09IDM6DQogICAgICAgICAgICAgICAgICAgIGUuYXBwZW5kKCcnKQ0KICAgICAgICAgICAgICAgICAgcmxpc3QuYXBwZW5kKGUpDQogICAgICAgICAgICBybGlzdC5yZXZlcnNlKCkNCiAgICAgICAgICAgIGZvciBlIGluIHJsaXN0Og0KICAgICAgICAgICAgICAgIG1hcmsgPSBGYWxzZQ0KICAgICAgICAgICAgICAgIGlmIGVbMV0uc3RhcnRzd2l0aCgiMC45OTkwIik6DQogICAgICAgICAgICAgICAgICAgIG1hcmsgPSBUcnVlDQogICAgICAgICAgICAgICAgaWYgZVsxXS5zdGFydHN3aXRoKCIwLjk5MCIpOg0KICAgICAgICAgICAgICAgICAgICBtYXJrID0gVHJ1ZQ0KICAgICAgICAgICAgICAgIGlmIGVbMV0gPT0gIjAuOTUwMDAwMDAwMDAwIjoNCiAgICAgICAgICAgICAgICAgICAgbWFyayA9IFRydWUNCiAgICAgICAgICAgICAgICBpZiBlWzFdID09ICIwLjkwMDAwMDAwMDAwMCI6DQogICAgICAgICAgICAgICAgICAgIG1hcmsgPSBUcnVlDQogICAgICAgICAgICAgICAgaWYgZVsxXSA9PSAiMC44MDAwMDAwMDAwMDAiOg0KICAgICAgICAgICAgICAgICAgICBtYXJrID0gVHJ1ZQ0KICAgICAgICAgICAgICAgIGlmIGVbMV0gPT0gIjAuNTAwMDAwMDAwMDAwIjoNCiAgICAgICAgICAgICAgICAgICAgbWFyayA9IFRydWUNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgIDx0cj4nKQ0KICAgICAgICAgICAgICAgIGlmIG1hcms6DQogICAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgICA8dGQ+PG1hcms+JXM8L21hcms+PC90ZD4nJShlWzBdKSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbignICAgIDx0ZD48bWFyaz4lczwvbWFyaz48L3RkPiclKGVbMV0pKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oJyAgICA8dGQ+JXM8L3RkPiclKGVbMF0pKQ0KICAgICAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRkPiVzPC90ZD4nJShlWzFdKSkNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRkPiVzPC90ZD4nJShlWzJdKSkNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRkPiVzPC90ZD4nJShlWzNdKSkNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgICAgPHRkPiVzPC90ZD4nJSh0Y291bnQtaW50KGVbMl0pKSkNCiAgICAgICAgICAgICAgICBwcmludFN0cmVhbS5wcmludGxuKCcgIDwvdHI+JykNCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIjwvdGFibGU+IikNCg0KICAgICAgICAgICAgI3ByaW50U3RyZWFtLnByaW50bG4oIjwvcHJlPiIpDQoNCiAgICAgICAgICAgIHByaW50U3RyZWFtLnByaW50bG4oIjwvYm9keT4iKQ0KICAgICAgICAgICAgcHJpbnRTdHJlYW0ucHJpbnRsbigiPC9odG1sPiIpDQogICAgICAgICAgICBwcmludFN0cmVhbS5mbHVzaCgpDQogICAgICAgICAgICBwcmludFN0cmVhbS5jbG9zZSgpDQogICAgICAgICAgICBhdmdfYXBzID0gMC4wIGlmIHNteC5uYW1lIGluIFsib25TdGFydCIsICJvblN0b3AiXSBlbHNlIHNteC5udW1fYWN0aW9ucy9zbXguZHVyYXRpb24NCiAgICAgICAgICAgIGlmIHNteC5uYW1lIGluIFsib25TdGFydCIsICJvblN0b3AiXToNCiAgICAgICAgICAgICAgICBjcHVfdCA9ICIwOjAwOjAwIg0KICAgICAgICAgICAgICAgIHNteC5jcHUgPSAwLjANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY3B1X3QgPSBzdHJfZnJvbV9jcHVfdGltZV9ucyhzbXguY3B1X3RpbWVfbnMpDQogICAgICAgICAgICBodG1sID0gYmVuY2htYXJrX3N1bW1hcnlfcm93JShuYW1lMnMsdGV4dCxzbXgubnVtX2FjdGlvbnMsc214Lm51bV9mYWlsZWQsc3RyKGRhdGV0aW1lLnRpbWVkZWx0YShzZWNvbmRzPWludChzbS5kdXJhdGlvbikpKSxhdmdfYXBzLGpoeC5nZXRNZWFuKCkvMTAwMC4wLGpoeC5nZXRTdGREZXZpYXRpb24oKS8xMDAwLjAsc214Lm1pbl9ydCxqaHguZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTAuMCkvMTAwMC4wLGpoeC5nZXRWYWx1ZUF0UGVyY2VudGlsZSg5OS4wKS8xMDAwLjAsc214Lm1heF9ydCxzbXgubWF4X3J0X3RzWzg6XSxzbXguYXZnX3FzLHNteC5tYXhfcXMsc214Lm1heF9hd3Qsc214Lm1heF93dCxjcHVfdCxzbXguY3B1LHNteC5tZW0pDQogICAgICAgICAgICBpZiBub3QgcHJpbnRfZGV0YWlsX3Jvd3M6DQogICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgiPGI+IiwiIikNCiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L2I+IiwiIikNCiAgICAgICAgICAgICMgUmVtb3ZlIHRhZzENCiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjx0YWcxPiIsIiIpDQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L3RhZzE+IiwiIikNCiAgICAgICAgICAgICMgUmVtb3ZlIHRhZzINCiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoIjx0YWcyPiIsIiIpDQogICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCI8L3RhZzI+IiwiIikNCg0KICAgICAgICAgICAgcHJpbnRmKGh0bWwpDQogICAgICAgICAgICBpZiBsZW4obmFtZTJzX2xpc3QpID4gMDoNCiAgICAgICAgICAgICAgICBuYW1lMnMgPSBuYW1lMnNfbGlzdFswXQ0KICAgICAgICAgICAgICAgIGRlbCBuYW1lMnNfbGlzdFswXQ0KDQogICAgICAgICAgICBwYWdlX2lkICs9IDENCg0KICAgIHByaW50ZihoZWFkZXIucmVwbGFjZSgiX19ERVNDMV9fIiwgZGVzYzEpLnJlcGxhY2UoIl9fREVTQzJfXyIsIGRlc2MyKSkNCg0KICAgIHByZXZfcm93X2lkID0gMA0KICAgIGZvciBlIGluIHJiOg0KICAgICAgICBjdXJyZW50X3Jvd19pZCA9IGludChlWyJyb3dfaWQiXSkNCiAgICAgICAgaWYgY3VycmVudF9yb3dfaWQgPD0gcHJldl9yb3dfaWQ6DQogICAgICAgICAgICBpZiBzbSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICBwcmludF9hY3Rpb25fc3VtbWFyeSgpDQogICAgICAgICAgICAgICAgcHJpbnRfZ2xvYmFsX3N1bW1hcnkoKQ0KICAgICAgICAgICAgICAgIHByaW50ZihiZW5jaG1hcmtfZW1wdHlfcm93KQ0KICAgICAgICAgICAgICAgIHByaW50ZihiZW5jaG1hcmtfY29sdW1ucykNCiAgICAgICAgICAgIHNtID0gU3VtbWFyeSgpDQogICAgICAgICAgICBzbS5uYW1lID0gZVsiYm1fbmFtZSJdDQogICAgICAgICAgICBqaC5yZXNldCgpDQogICAgICAgICAgICBiZW5jaG1hcmtfaWQgKz0gMQ0KICAgICAgICAgICAgamhoID0ge30NCiAgICAgICAgICAgIGpzcyA9IHt9DQogICAgICAgICAgICBwcmludGYoYmVuY2htYXJrX2hlYWRlciUoZVsiYm1fbmFtZSJdKSkNCiAgICAgICAgICAgIGlmIGxlbihlWyJ3b3JrZmxvd19uYW1lIl0pID4gMDoNCiAgICAgICAgICAgICAgICBuYW1lMnNfbGlzdCA9IFsidTolZCwgdDolZCIlKGVbIm51bV91c2VycyJdLGVbIm51bV90aHJlYWRzIl0pLCAidzolcyIlKGVbIndvcmtmbG93X25hbWUiXSksICJjOiVkIiUoZVsiY29udGV4dF9pZCJdKSAsIiJdDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG5hbWUyc19saXN0ID0gWyJ1OiVkLCB0OiVkIiUoZVsibnVtX3VzZXJzIl0sZVsibnVtX3RocmVhZHMiXSksICJjOiVkIiUoZVsiY29udGV4dF9pZCJdKSwiIl0NCiAgICAgICAgICAgIG5hbWUycyA9IG5hbWUyc19saXN0WzBdDQogICAgICAgICAgICBkZWwgbmFtZTJzX2xpc3RbMF0NCiAgICAgICAgaHQgPSBIaXN0b2dyYW0uZnJvbVN0cmluZyhlWyJoaXN0b2dyYW1fcnQiXSkNCiAgICAgICAgamguYWRkKGh0KQ0KICAgICAgICBwX21lbSA9IDEwMC4wICogZVsianZtX21lbW9yeV91c2VkIl0gLyBlWyJqdm1fbWVtb3J5X21heGltdW0iXQ0KICAgICAgICBwX2NwdSA9IGVbInByb2Nlc3NfY3B1X3V0aWxpemF0aW9uIl0NCiAgICAgICAgaWYgZVsiYm1fbmFtZSJdIGluIFsib25TdGFydCIsICJvblN0b3AiXToNCiAgICAgICAgICAgIGNwdV90ID0gIjA6MDA6MDAiDQogICAgICAgICAgICBwX2NwdSA9IDAuMA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY3B1X3QgPSBzdHJfZnJvbV9jcHVfdGltZV9ucyhlWyJwcm9jZXNzX2NwdV90aW1lX25zIl0pDQogICAgICAgICAgICBwX2NwdSA9IGVbInByb2Nlc3NfY3B1X3V0aWxpemF0aW9uIl0NCiAgICAgICAgaWYgcHJpbnRfZGV0YWlsX3Jvd3M6DQogICAgICAgICAgICBwcmludGYoYmVuY2htYXJrX2RldGFpbF9yb3clKCBcDQogICAgICAgICAgICAgICAgbmFtZTJzLA0KICAgICAgICAgICAgICAgIGVbInJvd19pZCJdKzEsDQogICAgICAgICAgICAgICAgZVsibnVtX2FjdGlvbnMiXSwNCiAgICAgICAgICAgICAgICBlWyJudW1fZmFpbGVkIl0sDQogICAgICAgICAgICAgICAgc3RyKGRhdGV0aW1lLnRpbWVkZWx0YShzZWNvbmRzPWludChlWyJkdXJhdGlvbiJdKSkpLA0KICAgICAgICAgICAgICAgIDAuMCBpZiBlWyJibV9uYW1lIl0gaW4gWyJvblN0YXJ0IiwgIm9uU3RvcCJdIGVsc2UgZVsiYXZnX2FwcyJdLA0KICAgICAgICAgICAgICAgIGVbImF2Z19ydCJdLA0KICAgICAgICAgICAgICAgIGh0LmdldFN0ZERldmlhdGlvbigpLzEwMDAuMCwNCiAgICAgICAgICAgICAgICBlWyJtaW5fcnQiXSwNCiAgICAgICAgICAgICAgICBlWyJwZXJjZW50aWxlc19ydCJdWyI5MC4wIl0sDQogICAgICAgICAgICAgICAgZVsicGVyY2VudGlsZXNfcnQiXVsiOTkuMCJdLA0KICAgICAgICAgICAgICAgIGVbIm1heF9ydCJdLA0KICAgICAgICAgICAgICAgIGVbIm1heF9ydF90cyJdWzg6XSwNCiAgICAgICAgICAgICAgICBlWyJhdmdfd3RocmVhZF9xc2l6ZSJdLA0KICAgICAgICAgICAgICAgIGVbIm1heF93dGhyZWFkX3FzaXplIl0sDQogICAgICAgICAgICAgICAgZVsiYXZnX3d0Il0sDQogICAgICAgICAgICAgICAgZVsibWF4X3d0Il0sDQogICAgICAgICAgICAgICAgY3B1X3QsDQogICAgICAgICAgICAgICAgcF9jcHUsDQogICAgICAgICAgICAgICAgcF9tZW0NCiAgICAgICAgICAgICAgICApKQ0KICAgICAgICAgICAgaWYgbGVuKG5hbWUyc19saXN0KSA+IDA6DQogICAgICAgICAgICAgICAgbmFtZTJzID0gbmFtZTJzX2xpc3RbMF0NCiAgICAgICAgICAgICAgICBkZWwgbmFtZTJzX2xpc3RbMF0NCiAgICAgICAgaWYgc20ubWluX3J0ID4gZVsibWluX3J0Il06DQogICAgICAgICAgICBzbS5taW5fcnQgPSBlWyJtaW5fcnQiXQ0KICAgICAgICBpZiBzbS5tYXhfcnQgPCBlWyJtYXhfcnQiXToNCiAgICAgICAgICAgIHNtLm1heF9ydCA9IGVbIm1heF9ydCJdDQogICAgICAgICAgICBzbS5tYXhfcnRfdHMgPSBlWyJtYXhfcnRfdHMiXQ0KICAgICAgICBzbS5udW1fYWN0aW9ucyArPSBlWyJudW1fYWN0aW9ucyJdDQogICAgICAgIHNtLm51bV9mYWlsZWQgKz0gZVsibnVtX2ZhaWxlZCJdDQogICAgICAgIHNtLmR1cmF0aW9uICs9IGVbImR1cmF0aW9uIl0NCiAgICAgICAgaWYgc20uYXZnX3FzIDwgZVsiYXZnX3d0aHJlYWRfcXNpemUiXToNCiAgICAgICAgICAgIHNtLmF2Z19xcyA9IGVbImF2Z193dGhyZWFkX3FzaXplIl0NCiAgICAgICAgaWYgc20ubWF4X3FzIDwgZVsibWF4X3d0aHJlYWRfcXNpemUiXToNCiAgICAgICAgICAgIHNtLm1heF9xcyA9IGVbIm1heF93dGhyZWFkX3FzaXplIl0NCiAgICAgICAgaWYgc20ubWF4X2F3dCA8IGVbImF2Z193dCJdOg0KICAgICAgICAgICAgc20ubWF4X2F3dCA9IGVbImF2Z193dCJdDQogICAgICAgIGlmIHNtLm1heF93dCA8IGVbIm1heF93dCJdOg0KICAgICAgICAgICAgc20ubWF4X3d0ID0gZVsibWF4X3d0Il0NCiAgICAgICAgaWYgc20ubWVtIDwgcF9tZW06DQogICAgICAgICAgICBzbS5tZW0gPSBwX21lbQ0KICAgICAgICBpZiBzbS5jcHUgPCBwX2NwdToNCiAgICAgICAgICAgIHNtLmNwdSA9IHBfY3B1DQogICAgICAgIHNtLmNwdV90aW1lX25zICs9IGVbInByb2Nlc3NfY3B1X3RpbWVfbnMiXQ0KDQogICAgICAgIGlmIGxlbihzbS5jaGFydF90X2xpc3QpID09IC0xOg0KICAgICAgICAgICAgc20uY2hhcnRfdF9saXN0LmFwcGVuZCgNCiAgICAgICAgICAgIFsNCiAgICAgICAgICAgICAgICAnJXMnJShlWyJ0ZXN0X2JlZ2luIl0ucmVwbGFjZSgiXyIsICJUIikpLA0KICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoZVsiYXZnX2FwcyJdKSksDQogICAgICAgICAgICAgICAgZmxvYXQoIiUuM2YiJShlWyJudW1fZmFpbGVkIl0vZVsiZHVyYXRpb24iXSkpDQogICAgICAgICAgICBdKQ0KDQogICAgICAgIHNtLmNoYXJ0X3RfbGlzdC5hcHBlbmQoDQogICAgICAgICAgICBbDQogICAgICAgICAgICAgICAgJyVzJyUoZVsidGVzdF9lbmQiXS5yZXBsYWNlKCJfIiwgIlQiKSksDQogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJhdmdfYXBzIl0pKSwNCiAgICAgICAgICAgICAgICBmbG9hdCgiJS4zZiIlKGVbIm51bV9mYWlsZWQiXS9lWyJkdXJhdGlvbiJdKSkNCiAgICAgICAgICAgICBdKQ0KDQogICAgICAgICMgWycyMDE4LTA0LTEwVDIwOjQwOjMzWicsIDEsIDUsIDEwLCAyMCwgMjUsIDMwIF0NCiAgICAgICAgaWYgbGVuKHNtLmNoYXJ0X3BfbGlzdCkgPT0gLTE6DQogICAgICAgICAgICBzbS5jaGFydF9wX2xpc3QuYXBwZW5kKA0KICAgICAgICAgICAgICAgIFsNCiAgICAgICAgICAgICAgICAgICAgJyVzJyUoZVsidGVzdF9iZWdpbiJdLnJlcGxhY2UoIl8iLCAiVCIpKSwNCiAgICAgICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJtaW5fcnQiXSkpLA0KICAgICAgICAgICAgICAgICAgICBmbG9hdCgiJS4xZiIlKGVbImF2Z19ydCJdKSksDQogICAgICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoaHQuZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTAuMCkvMTAwMC4wKSksDQogICAgICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoaHQuZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTUuMCkvMTAwMC4wKSksDQogICAgICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoaHQuZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTkuMCkvMTAwMC4wKSksDQogICAgICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoZVsibWF4X3J0Il0pKQ0KICAgICAgICAgICAgICAgIF0pDQoNCiAgICAgICAgc20uY2hhcnRfcF9saXN0LmFwcGVuZCgNCiAgICAgICAgICAgIFsNCiAgICAgICAgICAgICAgICAnJXMnJShlWyJ0ZXN0X2VuZCJdLnJlcGxhY2UoIl8iLCAiVCIpKSwNCiAgICAgICAgICAgICAgICBmbG9hdCgiJS4xZiIlKGVbIm1pbl9ydCJdKSksDQogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShlWyJhdmdfcnQiXSkpLA0KICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoaHQuZ2V0VmFsdWVBdFBlcmNlbnRpbGUoOTAuMCkvMTAwMC4wKSksDQogICAgICAgICAgICAgICAgZmxvYXQoIiUuMWYiJShodC5nZXRWYWx1ZUF0UGVyY2VudGlsZSg5NS4wKS8xMDAwLjApKSwNCiAgICAgICAgICAgICAgICBmbG9hdCgiJS4xZiIlKGh0LmdldFZhbHVlQXRQZXJjZW50aWxlKDk5LjApLzEwMDAuMCkpLA0KICAgICAgICAgICAgICAgIGZsb2F0KCIlLjFmIiUoZVsibWF4X3J0Il0pKQ0KICAgICAgICAgICAgXSkNCg0KICAgICAgICAjIGpoaCAuLi4NCiAgICAgICAgZm9yIGtleSBpbiBlWyJ1c2VyX2FjdGlvbnMiXS5rZXlzKCk6DQogICAgICAgICAgICBhciA9IGVbInVzZXJfYWN0aW9ucyJdW2tleV0NCiAgICAgICAgICAgIGh0dCA9IEhpc3RvZ3JhbS5mcm9tU3RyaW5nKGFyWyJoaXN0b2dyYW1fcnQiXSkNCiAgICAgICAgICAgICNwcmludChhclsibmFtZSJdICsgIiAtICIgKyAiJS4zZiIlKGh0dC5nZXRNZWFuKCkvMTAwMC4wKSkNCiAgICAgICAgICAgIGlmIGpoaC5oYXNfa2V5KGtleSk6DQogICAgICAgICAgICAgICAgamhoW2tleV0uYWRkKGh0dCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgamhoW2tleV0gPSBIaXN0b2dyYW0oMSwgMzYwMCoxMDAwKjEwMDAsIDMpDQogICAgICAgICAgICAgICAgamhoW2tleV0uYWRkKGh0dCkNCiAgICAgICAgICAgICNwcmludChhclsibmFtZSJdICsgIiAtICIgKyAiJS4zZiIlKGpoaFtrZXldLmdldE1lYW4oKS8xMDAwLjApICsgIiAtICVkIiUoamhoW2tleV0uZ2V0VG90YWxDb3VudCgpKSkNCg0KICAgICAgICAjIGpzcyAuLi4NCiAgICAgICAgZm9yIGtleSBpbiBlWyJ1c2VyX2FjdGlvbnMiXS5rZXlzKCk6DQogICAgICAgICAgICBhciA9IGVbInVzZXJfYWN0aW9ucyJdW2tleV0NCiAgICAgICAgICAgIGlmIGpzcy5oYXNfa2V5KGtleSk6DQogICAgICAgICAgICAgICAgc214ID0ganNzW2tleV0NCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgc214ID0ganNzW2tleV0gPSBTdW1tYXJ5KCkNCiAgICAgICAgICAgICAgICBzbXgubmFtZSA9IGVbImJtX25hbWUiXQ0KDQogICAgICAgICAgICBpZiBzbXgubWluX3J0ID4gYXJbIm1pbl9ydCJdOg0KICAgICAgICAgICAgICAgIHNteC5taW5fcnQgPSBhclsibWluX3J0Il0NCiAgICAgICAgICAgIGlmIHNteC5tYXhfcnQgPCBhclsibWF4X3J0Il06DQogICAgICAgICAgICAgICAgc214Lm1heF9ydCA9IGFyWyJtYXhfcnQiXQ0KICAgICAgICAgICAgICAgIHNteC5tYXhfcnRfdHMgPSBhclsibWF4X3J0X3RzIl0NCiAgICAgICAgICAgIHNteC5udW1fYWN0aW9ucyArPSBhclsibnVtX2FjdGlvbnMiXQ0KICAgICAgICAgICAgc214Lm51bV9mYWlsZWQgKz0gYXJbIm51bV9mYWlsZWQiXQ0KDQogICAgICAgICAgICBzbXguZHVyYXRpb24gKz0gZVsiZHVyYXRpb24iXQ0KICAgICAgICAgICAgaWYgc214LmF2Z19xcyA8IGVbImF2Z193dGhyZWFkX3FzaXplIl06DQogICAgICAgICAgICAgICAgc214LmF2Z19xcyA9IGVbImF2Z193dGhyZWFkX3FzaXplIl0NCiAgICAgICAgICAgIGlmIHNteC5tYXhfcXMgPCBlWyJtYXhfd3RocmVhZF9xc2l6ZSJdOg0KICAgICAgICAgICAgICAgIHNteC5tYXhfcXMgPSBlWyJtYXhfd3RocmVhZF9xc2l6ZSJdDQogICAgICAgICAgICBpZiBzbXgubWF4X2F3dCA8IGVbImF2Z193dCJdOg0KICAgICAgICAgICAgICAgIHNteC5tYXhfYXd0ID0gZVsiYXZnX3d0Il0NCiAgICAgICAgICAgIGlmIHNteC5tYXhfd3QgPCBlWyJtYXhfd3QiXToNCiAgICAgICAgICAgICAgICBzbXgubWF4X3d0ID0gZVsibWF4X3d0Il0NCiAgICAgICAgICAgIGlmIHNteC5tZW0gPCBwX21lbToNCiAgICAgICAgICAgICAgICBzbXgubWVtID0gcF9tZW0NCiAgICAgICAgICAgIGlmIHNteC5jcHUgPCBwX2NwdToNCiAgICAgICAgICAgICAgICBzbXguY3B1ID0gcF9jcHUNCiAgICAgICAgICAgIHNteC5jcHVfdGltZV9ucyArPSBlWyJwcm9jZXNzX2NwdV90aW1lX25zIl0NCg0KICAgIHByaW50X2FjdGlvbl9zdW1tYXJ5KCkNCiAgICBwcmludF9nbG9iYWxfc3VtbWFyeSgpDQogICAgcHJpbnRmKHRyYWlsZXIpDQoNCiAgICByZXBvcnRfZmguY2xvc2UoKQ0KDQogICAgb3MuY2hkaXIoY3dkKQ0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIGlmIGxlbihzeXMuYXJndikgPj0gMzoNCiAgICAgICAgZmlsZW5hbWUgPSBzeXMuYXJndlsxXQ0KICAgICAgICBjb25maWdGaWxlbmFtZSA9IHN5cy5hcmd2WzJdDQogICAgICAgIGNyZWF0ZVJlcG9ydChmaWxlbmFtZSwgY29uZmlnRmlsZW5hbWUpDQo=";

    public static void main(String... args) {
        String mainScriptFilename = "report.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decodedBytes);
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
