package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS io.github.wfouche.tulip:tulip-runtime:2.1.12-dev
//DEPS org.python:jython-slim:2.7.4
//JAVA 21
// spotless:on

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import org.python.util.PythonInterpreter;

/**
 * The class provides a main method to run a Python script embedded in a Java application.
 *
 * <p>This class is generated by JBang from a Python script.
 */
public class report_py {

    /** The base64 encoded Python script to be executed. */
    public static String mainScriptTextBase64 =
            "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";

    /** Private constructor to prevent instantiation. */
    public report_py() {
        // Private constructor to prevent instantiation
    }

    /**
     * Decompresses a byte array that was compressed using GZIP.
     *
     * @param compressedData The byte array containing the compressed data.
     * @return The decompressed string.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static String decompress(byte[] compressedData) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);
        GZIPInputStream gzip = new GZIPInputStream(bis);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzip.read(buffer)) != -1) {
            bos.write(buffer, 0, len);
        }
        gzip.close();
        bis.close();
        bos.close();
        return bos.toString(StandardCharsets.UTF_8.name());
    }

    /**
     * The main method that serves as the entry point for the application. It initializes the Python
     * interpreter and executes the embedded script.
     *
     * @param args Command-line arguments passed to the application.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static void main(String... args) throws IOException {
        String mainScriptFilename = "report.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decompress(decodedBytes));
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
