package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS io.github.wfouche.tulip:tulip-runtime:2.1.12-dev
//DEPS org.python:jython-slim:2.7.4
//JAVA 21
// spotless:on

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import org.python.util.PythonInterpreter;

/**
 * The class provides a main method to run a Python script embedded in a Java application.
 *
 * <p>This class is generated by JBang from a Python script.
 */
public class report_py {

    /** The base64 encoded Python script to be executed. */
    public static String mainScriptTextBase64 =
            "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";

    /** Private constructor to prevent instantiation. */
    public report_py() {
        // Private constructor to prevent instantiation
    }

    /**
     * Decompresses a byte array that was compressed using GZIP.
     *
     * @param compressedData The byte array containing the compressed data.
     * @return The decompressed string.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static String decompress(byte[] compressedData) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);
        GZIPInputStream gzip = new GZIPInputStream(bis);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzip.read(buffer)) != -1) {
            bos.write(buffer, 0, len);
        }
        gzip.close();
        bis.close();
        bos.close();
        return bos.toString(StandardCharsets.UTF_8.name());
    }

    /**
     * The main method that serves as the entry point for the application. It initializes the Python
     * interpreter and executes the embedded script.
     *
     * @param args Command-line arguments passed to the application.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static void main(String... args) throws IOException {
        String mainScriptFilename = "report.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decompress(decodedBytes));
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
