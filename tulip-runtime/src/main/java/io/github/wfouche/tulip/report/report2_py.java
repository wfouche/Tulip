package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS org.python:jython-standalone:2.7.4
//DEPS com.google.code.gson:gson:2.11.0
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS org.python:jython-standalone:2.7.4
//JAVA 21
// spotless:on

// import org.python.util.jython;
import java.util.Base64;
import org.python.util.PythonInterpreter;

public class report2_py {

  public static String mainScriptTextBase64 =
      "";

  public static void main(String... args) {
    String mainScriptFilename = "report2.py";
    String mainScript = "";
    String jythonArgsScript = "";
    for (String arg : args) {
      // System.out.println("Java: " + arg);
      if (jythonArgsScript.length() == 0) {
        if (!arg.equals(mainScriptFilename)) {
          jythonArgsScript += "'" + mainScriptFilename + "', ";
        }
      } else {
        jythonArgsScript += ", ";
      }
      jythonArgsScript += "'" + arg + "'";
    }
    if (jythonArgsScript.length() == 0) {
      jythonArgsScript = "'" + mainScriptFilename + "'";
    }
    jythonArgsScript = "import sys; sys.argv = [" + jythonArgsScript + "]";
    {
      byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
      String text = new String(decodedBytes);
      // System.out.println("===");
      // System.out.println(text);
      // System.out.println("===");
      mainScript = text;
    }
    // System.out.println("args --> " + jythonArgsScript);
    {
      // run script
      PythonInterpreter pyInterp = new PythonInterpreter();
      // initialize args
      pyInterp.exec(jythonArgsScript);
      // run script
      // pyInterp.exec("__name__=""");
      pyInterp.exec(mainScript);
    }
    // jython.main(args);
  }
}
