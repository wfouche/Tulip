/*
 * This file was generated by the Gradle 'init' task.
 */
//import org.jetbrains.dokka.gradle.DokkaTask
import org.jreleaser.model.Active
import java.util.Locale

group = "io.github.wfouche.tulip"
version = "2.1.12"

plugins {
    id("com.github.ben-manes.versions") version "0.53.0"
    // https://plugins.gradle.org/plugin/com.github.ben-manes.versions

    id("buildlogic.kotlin-library-conventions")
    // Gradle convention plugin for Kotlin libraries

    // Core Gradle plugin
    `maven-publish`

    id("org.jreleaser") version "1.20.0"
    // https://plugins.gradle.org/plugin/org.jreleaser

    id("org.jetbrains.kotlin.plugin.serialization") version "2.1.21"
    // https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.serialization

    // id("org.jetbrains.dokka") version "2.0.0"
    // https://plugins.gradle.org/plugin/org.jetbrains.dokka

    id("com.diffplug.spotless") version "8.0.0"
    // https://plugins.gradle.org/plugin/com.diffplug.spotless
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    // - Micrometer

    // implementation("io.micrometer:micrometer-registry-jmx:1.14.3")
    // https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-jmx

    // - HdrHistogram

    implementation("org.hdrhistogram:HdrHistogram:2.2.2")
    // https://mvnrepository.com/artifact/org.hdrhistogram/HdrHistogram

    // - Jython

    implementation("org.python:jython-slim:2.7.4")
    // https://mvnrepository.com/artifact/org.python/jython-standalone

    // - Kotlin JSON Serialization

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.1")
    // https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-serialization-json

    // - Leego Banana

    implementation("io.leego:banana:2.1.0")
    // https://mvnrepository.com/artifact/io.leego/banana

    // - Google

    implementation("com.google.code.gson:gson:2.13.2")
    // https://mvnrepository.com/artifact/com.google.code.gson/gson

    implementation("com.google.guava:guava:33.5.0-jre")
    // https://mvnrepository.com/artifact/com.google.guava/guava

    // - Html Mermaid Dokka Plugin

    // dokkaPlugin("com.glureau:html-mermaid-dokka-plugin:0.6.0")
    // https://mvnrepository.com/artifact/com.glureau/html-mermaid-dokka-plugin

    // - Kotlin Logging

    // implementation("io.github.oshai:kotlin-logging-jvm:7.0.3")
    // https://mvnrepository.com/artifact/io.github.oshai/kotlin-logging-jvm

    // - Spring Boot

    implementation("org.springframework.boot:spring-boot-starter-web:3.5.7")
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web

    // - SLF4J and Logback

    implementation("org.slf4j:slf4j-api:2.0.17")
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api

    implementation("ch.qos.logback:logback-core:1.5.20")
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation("ch.qos.logback:logback-core:1.5.20")

    implementation("ch.qos.logback:logback-classic:1.5.20")
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation("ch.qos.logback:logback-classic:1.5.20")

    // - Apache HttpClient

    implementation("org.apache.httpcomponents.client5:httpclient5:5.5.1")
    // https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5

    // - Asciidoctor

    implementation("org.asciidoctor:asciidoctorj:3.0.0")
    // https://mvnrepository.com/artifact/org.asciidoctor/asciidoctorj

    implementation("org.asciidoctor:asciidoctorj-diagram:3.0.1")
    // https://mvnrepository.com/artifact/org.asciidoctor/asciidoctorj-diagram

    implementation("org.asciidoctor:asciidoctorj-diagram-plantuml:1.2025.3")
    // https://mvnrepository.com/artifact/org.asciidoctor/asciidoctorj-diagram-plantuml
}

tasks.withType<JavaCompile>().configureEach {
    options.isDeprecation = true
}

tasks.jar {
    manifest {
        attributes["Main-Class"] = "io.github.wfouche.tulip.api.TulipApi"
    }
}

// https://dev.to/tschuehly/how-to-publish-a-kotlinjava-spring-boot-library-with-gradle-to-maven-central-complete-guide-402a
// https://jreleaser.org/guide/latest/examples/maven/staging-artifacts.html
//
// $ ./gradlew publish    # Output in folder tulip-runtime/build/staging-deploy
//
publishing {
    publications {
        create<MavenPublication>("Tulip") {
            from(components["java"])
            groupId = "io.github.wfouche.tulip"
            artifactId = "tulip-runtime"
            description = "Tulip Runtime"
        }
        withType<MavenPublication> {
            pom {
                packaging = "jar"
                name.set("tulip-runtime")
                description.set("Tulip Runtime")
                // url.set("https://wfouche.github.io/Tulip")
                url.set("https://github.com/wfouche/Tulip")
                inceptionYear.set("2020")
                licenses {
                    license {
                        name.set("Apache License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0")
                    }
                }
                developers {
                    developer {
                        id.set("wfouche")
                        name.set("Werner Fouché")
                    }
                }
                scm {
                    connection.set("scm:git:git@github.com:wfouche/Tulip.git")
                    developerConnection.set("scm:git:ssh:git@github.com:wfouche/Tulip.git")
                    url.set("https://github.com/wfouche/Tulip")
                }
            }
        }
    }
    repositories {
        maven {
            url = uri(layout.buildDirectory.dir("staging-deploy"))
        }
    }
}

jreleaser {
    project {
        copyright.set("Werner Fouché")
    }
    gitRootSearch.set(true)
    signing {
        active.set(Active.ALWAYS)
        armored.set(true)
    }
    deploy {
        maven {
            nexus2 {
                create("maven-central") {
                    active.set(Active.ALWAYS)
                    url.set("https://s01.oss.sonatype.org/service/local")
                    closeRepository.set(false)
                    releaseRepository.set(false)
                    stagingRepositories.add("build/staging-deploy")
                }
            }
        }
    }
}

//tasks.withType<DokkaTask>().configureEach {
//    dokkaSourceSets {
//        configureEach {
//            val markdowns =
//                fileTree("src/main/kotlin") {
//                    include("**/*.md")
//                }
//            includes.from(markdowns.files)
//        }
//    }
//}

configure<com.diffplug.gradle.spotless.SpotlessExtension> {
    java {
        googleJavaFormat("1.30.0").aosp()
        toggleOffOn()
    }
    kotlin {
        // version, style and all configurations here are optional
        ktfmt("0.59").googleStyle().configure {
            it.setMaxWidth(100)
            it.setBlockIndent(4)
            it.setContinuationIndent(4)
            it.setRemoveUnusedImports(true)
            //it.setManageTrailingCommas(false)
        }
    }
    kotlinGradle {
        target("*.gradle.kts")
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.register("fixJbangMarker") {
    description = "Fixes the JBang marker line in Java source files if necessary."
    group = "build"
    doLast {
        // Define the file collection using fileTree and setFrom
        val javaFiles = fileTree(mapOf("dir" to "src")).apply {
            include("**/*.java")
        }

        val markerString = """///usr/bin/env jbang "$0" "$@" ; exit $?"""

        javaFiles.forEach { file ->
            // Use Kotlin's standard library for file IO and list manipulation
            val lines = file.readLines().toMutableList()

            if (lines.isNotEmpty() &&
                lines[0] != markerString &&
                lines[0].startsWith("//") &&
                lines[0].lowercase(Locale.getDefault()).contains("jbang")
            ) {
                // If the conditions are met, replace the first line
                lines[0] = markerString

                // Write the modified content back to the file
                file.writeText(lines.joinToString("\n"))
                println("Fixed JBang marker in: $file")
            }
        }
    }
}
