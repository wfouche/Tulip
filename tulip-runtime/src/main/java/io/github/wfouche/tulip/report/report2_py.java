package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS org.python:jython-standalone:2.7.4
//JAVA 21
// spotless:on

import java.util.Base64;
import org.python.util.PythonInterpreter;

public class report2_py {

  public static String mainScriptTextBase64 =
      "";

  public static void main(String... args) {
    String mainScriptFilename = "report2.py";
    String mainScript = "";
    String pythonArgsScript = "";
    for (String arg : args) {
      if (pythonArgsScript.length() == 0) {
        if (!arg.equals(mainScriptFilename)) {
          pythonArgsScript += "'" + mainScriptFilename + "', ";
        }
      } else {
        pythonArgsScript += ", ";
      }
      pythonArgsScript += "'" + arg + "'";
    }
    if (pythonArgsScript.length() == 0) {
      pythonArgsScript = "'" + mainScriptFilename + "'";
    }
    pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
    {
      byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
      String text = new String(decodedBytes);
      mainScript = text;
    }
    {
      // create Python interpreter object
      PythonInterpreter pyInterp = new PythonInterpreter();
      // initialize command-line args
      pyInterp.exec(pythonArgsScript);
      // run script
      pyInterp.exec(mainScript);
    }
  }
}
