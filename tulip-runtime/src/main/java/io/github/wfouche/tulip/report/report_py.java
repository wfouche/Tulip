package io.github.wfouche.tulip.report;

/// usr/bin/env jbang "$0" "$@" ; exit $?

// spotless:off
//DEPS com.google.code.gson:gson:2.13.1
//DEPS org.hdrhistogram:HdrHistogram:2.2.2
//DEPS io.github.wfouche.tulip:tulip-runtime:2.1.12-dev
//DEPS org.python:jython-slim:2.7.4
//JAVA 21
// spotless:on

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.zip.GZIPInputStream;
import org.python.util.PythonInterpreter;

/**
 * The class provides a main method to run a Python script embedded in a Java application.
 *
 * <p>This class is generated by JBang from a Python script.
 */
public class report_py {

    /** The base64 encoded Python script to be executed. */
    public static String mainScriptTextBase64 =
            "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";

    /** Private constructor to prevent instantiation. */
    public report_py() {
        // Private constructor to prevent instantiation
    }

    /**
     * Decompresses a byte array that was compressed using GZIP.
     *
     * @param compressedData The byte array containing the compressed data.
     * @return The decompressed string.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static String decompress(byte[] compressedData) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);
        GZIPInputStream gzip = new GZIPInputStream(bis);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzip.read(buffer)) != -1) {
            bos.write(buffer, 0, len);
        }
        gzip.close();
        bis.close();
        bos.close();
        return bos.toString(StandardCharsets.UTF_8.name());
    }

    /**
     * The main method that serves as the entry point for the application. It initializes the Python
     * interpreter and executes the embedded script.
     *
     * @param args Command-line arguments passed to the application.
     * @throws IOException if an I/O error occurs during decompression.
     */
    public static void main(String... args) throws IOException {
        String mainScriptFilename = "report.py";
        String mainScript = "";
        String pythonArgsScript = "";
        for (String arg : args) {
            if (pythonArgsScript.length() == 0) {
                if (!arg.equals(mainScriptFilename)) {
                    pythonArgsScript += "'" + mainScriptFilename + "', ";
                }
            } else {
                pythonArgsScript += ", ";
            }
            pythonArgsScript += "'" + arg + "'";
        }
        if (pythonArgsScript.length() == 0) {
            pythonArgsScript = "'" + mainScriptFilename + "'";
        }
        pythonArgsScript = "import sys; sys.argv = [" + pythonArgsScript + "]";
        {
            byte[] decodedBytes = Base64.getDecoder().decode(mainScriptTextBase64);
            String text = new String(decompress(decodedBytes));
            mainScript = text;
        }
        {
            // create Python interpreter object
            PythonInterpreter pyInterp = new PythonInterpreter();
            // initialize command-line args
            pyInterp.exec(pythonArgsScript);
            // run script
            pyInterp.exec(mainScript);
        }
    }
}
